# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

pr:
  autoCancel: true
  drafts: false
  branches:
    include:
    - staging


pool:
  vmImage: ubuntu-latest

name: 'eme_$(Build.DefinitionName)_fromBr-$(SourceBranchName)_on-$(Date:yyyyMMdd)_BID-$(Build.BuildId)_r-$(Rev:r)'

variables:
  buildConfiguration: 'Release'
  dotnetVersion: '7.0.400'
  nodeVersion: '18.x'
  frontendEnv: 'staging'

jobs:
  - job: test_with_clientside_checks
    workspace:
      clean: all
    steps:
    - checkout: self
      submodules: false
      fetchDepth: 5
      fetchTags: false
    - task: UseDotNet@2
      inputs:
        version: $(dotnetVersion)
    - bash: |
        echo Running restore
        dotnet restore

        echo "Building in $(buildConfiguration) mode"
        dotnet build --no-restore --configuration $(buildConfiguration)
      continueOnError: false
      displayName: 'Restore and Build'
      
    - bash: |
         echo Unit Tests
         dotnet test  --no-build --configuration $(buildConfiguration) --logger:"trx;LogFileName=TestResults.trx"
      displayName: 'Unit Tests'
      timeoutInMinutes: 3
      continueOnError: true
      workingDirectory: ./Energy.Test
    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: VSTest
        buildConfiguration: $(buildConfiguration)
        failTaskOnFailedTests: false
        testResultsFiles: ./Energy.Test/TestResults.trx
        testRunTitle: '$(frontendEnv) - Unit Test results'
    - task: UseNode@1
      condition: succeededOrFailed() 
      inputs:
        version: $(nodeVersion)
  
    - bash: |
         npm ci
      workingDirectory: ./Energy.App.Standalone
      displayName: 'npm install'
      
    - bash: |
         npm test --environments=$(frontendEnv)
      workingDirectory: ./Energy.App.Standalone
    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: JUnit
        testResultsFiles: './Energy.App.Standalone/testResults/clientDeploymentTestResults.xml'
        failTaskOnFailedTests: false
        buildConfiguration: $(frontendEnv)
        testRunTitle: '$(frontendEnv) - Client-side deployment test results'


    
      
    
  

