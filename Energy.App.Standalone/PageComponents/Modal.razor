


<div class="popover-container">
    <div class="@(_opened ? "popover-overlay" : "no-overlay")">@_opened</div>

    <MudPopover 
                Open="_opened"
                Class="eme-popover"
                OverflowBehavior="OverflowBehavior.FlipAlways"
                AnchorOrigin="Origin.BottomCenter"
                TransformOrigin="Origin.TopCenter"
                RelativeWidth="true">


        @switch (_currentStage)
        {
            case SetupStage.NotSeenWelcomeScreenSplash:
                <WizardStepTemplate OptionalHeaderText="Welcome to Explain my Energy" CloseWizardCallback="CloseModal">
                    <SetupStepPage>
                        <WelcomeText OnSuccessCallback="@(async
                            () =>
                            {   _currentStageReadyToMoveNext = true;
                                await WelcomeTextAcknowledged();
                            })">
                        </WelcomeText>
                    </SetupStepPage>
                    <ActionButtons>
                        <div class="d-flex justify-content-evenly">
                            <MudButton Disabled="@(!_currentStageReadyToMoveNext)" Color="Color.Primary" OnClick="GoToNextStage">Start Wizard</MudButton>
                            <MudButton Color="Color.Default" OnClick="CloseModal">Close</MudButton>
                        </div>
                    </ActionButtons>
                </WizardStepTemplate>
                break;
            case SetupStage.HouseholdNotSetup:
                <WizardStepTemplate CloseWizardCallback="CloseModal">
                    <SetupStepPage>
                        <Household SaveSuccessfulCallback="@(() => { _currentStageReadyToMoveNext = true; return Task.CompletedTask;})" />
                    </SetupStepPage>
                    <ActionButtons>
                        <div class="d-flex justify-content-evenly">
                            <MudButton Disabled="@(!_currentStageReadyToMoveNext)" Color="Color.Primary" OnClick="GoToNextStage">Next</MudButton>
                            <MudButton Color="Color.Default" OnClick="CloseModal">Close</MudButton>
                        </div>
                    </ActionButtons>
                </WizardStepTemplate>

                break;
            case SetupStage.GasMeterNotSetup:
                <WizardStepTemplate CloseWizardCallback="CloseModal">
                    <SetupStepPage>
                        <AddGasMeterFormComponent OnSuccessfulCallback="@(() => { _currentStageReadyToMoveNext = true; return Task.CompletedTask;})" />
                    </SetupStepPage>
                    <ActionButtons>
                        <div class="d-flex justify-content-evenly">
                            <MudButton Disabled="@(!_currentStageReadyToMoveNext)" Color="Color.Primary" OnClick="GoToNextStage">Authorize</MudButton>
                            <MudButton Disabled="@(!_canSkipCurrentStage || _currentStageReadyToMoveNext)" ButtonType="ButtonType.Button" OnClick="SkipToNextValidStage" Color="Color.Default">Skip to Electricity Meter</MudButton>

                            <MudButton Color="Color.Default" OnClick="CloseModal">Close</MudButton>
                        </div>
                    </ActionButtons>
                </WizardStepTemplate>

                break;
            case SetupStage.GasMeterNotAuthorized:
                <WizardStepTemplate CloseWizardCallback="CloseModal">
                    <SetupStepPage>
                        <MeterAuthorizationFormComponent 
                            MeterType="MeterType.Gas"
                            OnSuccessfulCallback="@((bool meterAuthSuccess) => 
                                                            {
                                                                _currentStageReadyToMoveNext = meterAuthSuccess;
                                                                return Task.CompletedTask;
                                                            })" />
                </SetupStepPage>
                <ActionButtons>
                        <div class="d-flex justify-content-evenly">
                            <MudButton Disabled="@(!_currentStageReadyToMoveNext)" Color="Color.Primary" OnClick="GoToNextStage">Authorize</MudButton>
                            <MudButton Disabled="@(!_canSkipCurrentStage || _currentStageReadyToMoveNext)" ButtonType="ButtonType.Button" OnClick="SkipToNextValidStage" Color="Color.Default">Skip</MudButton>

                            <MudButton Color="Color.Default" OnClick="CloseModal">Close</MudButton>
                        </div>
                    </ActionButtons>
                </WizardStepTemplate>
                break;
            case SetupStage.ElectricityMeterNotSetup:
                <WizardStepTemplate CloseWizardCallback="CloseModal">
                    <SetupStepPage>
                        <AddElectricityMeterFormComponent OnSuccessfulCallback="@(() => { _currentStageReadyToMoveNext = true; return Task.CompletedTask;})" />

                    </SetupStepPage>
                    <ActionButtons>
                        <div class="d-flex justify-content-evenly">
                            <MudButton Disabled="@(!_currentStageReadyToMoveNext)" Color="Color.Primary" OnClick="GoToNextStage">Authorize</MudButton>
                            <MudButton Disabled="@(!_canSkipCurrentStage || _currentStageReadyToMoveNext)" ButtonType="ButtonType.Button" OnClick="SkipToNextValidStage" Color="Color.Default">Skip</MudButton>

                            <MudButton Color="Color.Default" OnClick="CloseModal">Close</MudButton>
                        </div>
                    </ActionButtons>
                </WizardStepTemplate>
                break;
            case SetupStage.ElectricityMeterNotAuthorized:
                <WizardStepTemplate CloseWizardCallback="CloseModal">
                    <SetupStepPage>
                        <MeterAuthorizationFormComponent 
                            MeterType="MeterType.Electricity"
                            OnSuccessfulCallback="@((bool meterAuthSuccess) => 
                                                            {
                                                                _currentStageReadyToMoveNext = meterAuthSuccess;
                                                                return Task.CompletedTask;
                                                            })" />

                    </SetupStepPage>
                    <ActionButtons>
                        <div class="d-flex justify-content-evenly">
                            <MudButton Disabled="@(!_currentStageReadyToMoveNext)" Color="Color.Primary" OnClick="GoToNextStage">Authorize</MudButton>
                            <MudButton Disabled="@(!_canSkipCurrentStage || _currentStageReadyToMoveNext)" ButtonType="ButtonType.Button" OnClick="SkipToNextValidStage" Color="Color.Default">Skip</MudButton>

                            <MudButton Color="Color.Default" OnClick="CloseModal">Close</MudButton>
                        </div>
                    </ActionButtons>
                </WizardStepTemplate>
                break;
            case SetupStage.None:
                <WizardStepTemplate CloseWizardCallback="CloseModal">
                    <SetupStepPage>
                        <MudGrid Justify="Justify.Center">
                            <MudItem xs="12">
                                <MudPaper Elevation="2" Class="p-2 mt-2">
                                    <MudAlert Severity="Severity.Success" Elevation="0" Class="eme-alert">Setup wizard completed</MudAlert>
                                </MudPaper>
                            </MudItem>
                        </MudGrid>
                    </SetupStepPage>
                    <ActionButtons>
                        <div class="d-flex justify-content-evenly">
                            <MudButton Color="Color.Success" ButtonType="ButtonType.Button" OnClick="GoToAnalysis">View Analysis</MudButton>

                            <MudButton Color="Color.Default" OnClick="CloseModal">Close</MudButton>
                        </div>
                    </ActionButtons>
                </WizardStepTemplate>

                break;

            default:
                Logger.LogError("Setup Stage not recognised: {SetupStage}", _currentStage);
                break;
        }

    </MudPopover>

</div>

@code {

    [Inject] ILogger<Modal> Logger { get; set; }
    [Inject] NavigationManager NavigationManager { get; set; }
    [Inject] InMemoryStateContainer InMemoryStateContainer { get; set; }

    [Parameter] public bool Open { get; set; }


    [Parameter] public SetupStage InitialSetupStages { get; set; }

    List<SetupStage> _setupStages;
    bool _opened = false;

    SetupStage _currentStage;
    SetupStage _nextValidStage;
    bool _moveToNextStage = false;
    bool _currentStageReadyToMoveNext = false;
    bool _canSkipCurrentStage = false;

    private Task WelcomeTextAcknowledged()
    {
        InMemoryStateContainer.WelcomeTermsAccepted = true;
        return Task.CompletedTask;
    }

    protected override void OnParametersSet()
    {
        _opened = Open && !_closeModal;
        @if(!_opened)
        {
            return;
        }

        @if (InitialSetupStages == SetupStage.None)
        {
            Logger.LogInformation("All setup stages complete: {InitialSetupStages}", InitialSetupStages);
        }


        _setupStages = InitialSetupStages.eGetFlags().Where(c => c != SetupStage.None).ToList();

        _currentStage = _setupStages.First();

        SetSkipToNextValidStageValid();


    }


    void SetSkipToNextValidStageValid()
    {

        if (_currentStage == SetupStage.HouseholdNotSetup)
        {
            _canSkipCurrentStage = false;
            _nextValidStage = _setupStages.Find(c => c > SetupStage.HouseholdNotSetup);
            return;
        }

        if (_currentStage == SetupStage.None)
        {
            _canSkipCurrentStage = false;
            _nextValidStage = _currentStage;
            return;
        }

        var nextStage = _setupStages.Find(c => c > _currentStage);

        if (_currentStage == SetupStage.GasMeterNotSetup || _currentStage == SetupStage.GasMeterNotAuthorized)
        {
            if (_setupStages.Exists(c => c == SetupStage.ElectricityMeterNotSetup))
            {
                _canSkipCurrentStage = true;
                _nextValidStage = SetupStage.ElectricityMeterNotSetup;
                return;
            }

            if (_setupStages.Exists(c => c == SetupStage.ElectricityMeterNotAuthorized))
            {
                _canSkipCurrentStage = true;
                _nextValidStage = SetupStage.ElectricityMeterNotAuthorized;
                return;
            }
        }
        _nextValidStage = nextStage;
        _canSkipCurrentStage = false;

    }

    void SkipToNextValidStage()
    {
        _currentStage = _nextValidStage;
        SetSkipToNextValidStageValid();

    }

    void GoToNextStage()
    {
        _setupStages.Remove(_currentStage);
        _currentStage = _setupStages.FirstOrDefault();
        _currentStageReadyToMoveNext = false;
        _moveToNextStage = false;
        SetSkipToNextValidStageValid();

    }


    void GoToAnalysis()
    {
        try
        {
            _closeModal = true;
            _opened = false;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error closing modal");
        }

        NavigationManager.NavigateTo("/"); //TODO: Setup custom route
    }

    bool _closeModal;
    void CloseModal()
    {
        try
        {
            _opened = false;
            _closeModal = true;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error closing modal");
        }

    }

}
