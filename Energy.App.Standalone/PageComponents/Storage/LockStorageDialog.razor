@inherits FluxorComponent

<MudDialog @bind-IsVisible="_opened" Options="DialogOptions" ClassActions="d-flex justify-end">
    <TitleContent>
        <div class="d-flex justify-end align-baseline">
            <MudText Typo="Typo.h6" Align="Align.Center" GutterBottom="false" Class="mx-auto fw-bolder pl-10" Color="Color.Inherit">Lock Setup Data</MudText>

            <MudIconButton Color="Color.Inherit" Size="Size.Medium" Title="Close" Class="me-0"
                            OnClick="CloseModal" DisableElevation="@disableClose" DisableRipple="@disableClose" Disabled="@disableClose">
                <i class="fa-solid fa-xmark fa-xl" aria-hidden="true"></i>
            </MudIconButton>
        </div>
    </TitleContent>
    <DialogContent>
        <StorageLock Locking="LockingChange" />
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Default" Class="ma-3" Disabled="@disableClose"
                   OnClick="CloseModal">Close</MudButton>
    </DialogActions>
</MudDialog>
@code {

    [Inject] ILogger<LockStorageDialog> Logger { get; set; }

    [Inject] IState<UserLockState> UserLockState { get; set; }
    [Parameter] public bool Open { get; set; }
    [Parameter] public EventCallback<bool> OpenChanged { get; set; }

    bool _opened = false;

    bool disableClose = false;

    private DialogOptions DialogOptions = new()
        {
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            CloseOnEscapeKey = false,
            CloseButton = false,
            Position = DialogPosition.TopCenter,
            DisableBackdropClick = true,

        };

    private async void LockingChange(bool locking)
    {
        if (locking)
        {
            disableClose = true;
        }
        else
        {
            disableClose = false;
        }
        await InvokeAsync(StateHasChanged);
    }

    protected override void OnParametersSet()
    {
        _opened = Open;
        @if (!_opened)
        {
            return;
        }
    }

    private async Task CloseModal()
    {
        try
        {
            if (disableClose)
            {
                return;
            }
            _opened = false;
            await OpenChanged.InvokeAsync(false);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error closing modal");
        }
    }
}
