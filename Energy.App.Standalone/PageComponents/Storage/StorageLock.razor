@using System.ComponentModel.DataAnnotations
@using System.Timers
@using System.Text.RegularExpressions
@inherits FluxorComponent
@inject IState<UserLockState> UserLockState

<MudPaper Elevation="0" Class="p-2">
    @if (!lockingSuccess)
    {
        <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
            <div class="mt-1 d-flex justify-center">
                <DataAnnotationsValidator />
                <ValidationSummary />
            </div>
            <div class="d-flex flex-column flex-wrap justify-center align-center">
                <CopyToClipboardTextField CopyString="model.IhdMacId" TooltipWrapperClass="ml-2" CopyToClipboardTooltip="Copy IHD MAC ID to Clipboard">

                    <label id="label-ihdMacId" for="ihdMacId" class="mud-typography mud-typography-body1 fw-bolder">IHD MAC ID</label>
                </CopyToClipboardTextField>

                <div class="flex-1 d-flex flex-column ml-0 ml-sm-2">
                    <div class="d-flex flex-1  align-content-center  ">
                        <MudTextField id="ihdMacId"
                                      Class="lock-password-ihd-mac-id"
                                      @bind-Value="model.IhdMacId" autocomplete="username"
                                      HelperText="Make sure you make a note of or save your IHD MAC ID, you will need it to unlock along with your password"
                                      Variant="Variant.Outlined" MaxLength="16" InputType="InputType.Text" ReadOnly="true" Required="true" />
                    </div>
                </div>
            </div>
            <div class="mt-8 d-flex flex-wrap justify-start align-baseline px-0">
                <label id="label-lock-password" class="label-lock-password mud-typography mud-typography-body1 fw-bolder mx-auto mx-sm-0" for="ixwdw2">Password:</label>
                <div class="flex-1 d-flex flex-column ml-2">
                    <div class="d-flex flex-1   ">

                        <InputText id="ixwdw2" class="mud-typography mud-typography-body1 border-solid border-0 border-b-2 mud-border-default w-100percent minw-130px" type="@inputType1"
                                   @bind-Value="model.Input1" autocomplete="new-password" readonly="@locking"
                                   aria-labelledby="label-lock-password label-lock-password-details" />
                        <button class="mr-2" aria-label="@visibleAria1" title="@visibleAria1" type="button" disabled="@locking"
                                @onclick="ToggleTempVisibility1">
                            <i aria-hidden="true" class="@visibleIcon1"></i>
                        </button>
                    </div>
                    <label for="ixwdw2" class="mud-typography mud-typography-caption fw-bolder flex-1 ml-1" id="label-lock-password-details">
                        Password requires at least 9 alphanumeric characters, with at least one upper-case and at least one number
                    </label>
                </div>
            </div>
            <div class="mt-8 d-flex flex-wrap justify-start align-baseline px-0 ">
                <label id="label-lock-password-confirm" class="mud-typography mud-typography-body1 fw-bolder  mx-auto mx-sm-0" for="ixwdw3">
                    Confirm password:
                </label>
                <div class="flex-1 d-flex flex-column ml-2">
                    <div class="d-flex flex-1  border-solid  ">
                        <InputText id="ixwdw3"
                                   class="mud-typography mud-typography-body1 border-0 border-b-2 mud-border-default w-100percent minw-130px"
                                   type="@inputType2" aria-labelledby="label-lock-password-confirm label-lock-password-confirm-details"
                                   @bind-Value="model.Input2" autocomplete="new-password" readonly="@locking" />
                        <button class="mr-2" aria-label="@visibleAria2" title="@visibleAria2" type="button" disabled="@locking"
                                @onclick="ToggleTempVisibility2">
                            <i aria-hidden="true" class="@visibleIcon2"></i>
                        </button>
                    </div>
                    <label for="ixwdw3" class="mud-typography mud-typography-caption fw-bolder flex-1 ml-1" id="label-lock-password-confirm-details">
                        Ensure you save your password somewhere safe, you will need it to unlock your data with your IHD MAC ID
                    </label>
                </div>
            </div>
            <div class="my-7 my-sm-10 d-flex align-baseline">
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mx-auto" Disabled="@locking">
                    Lock Data
                </MudButton>
            </div>
        </EditForm>
    }
    @if (locking)
    {
        <MudAlert Severity="Severity.Info">Locking data</MudAlert>
    }
    else
    {
        if (inputError)
        {
            <MudAlert Severity="Severity.Warning">@lockingErrorMessage</MudAlert>
        }
        else if (lockingError)
        {
            <MudAlert Severity="Severity.Error">@lockingErrorMessage</MudAlert>
            <MudAlert Severity="Severity.Normal">
                If the problem persists, reach out via GitHub or email
            </MudAlert>
        }
        else if (lockingSuccess)
        {
            <MudAlert Severity="Severity.Success">Setup Data Locked</MudAlert>
        }
    }

</MudPaper>

@{
    var onBeforeInternalNavigation = locking ? BlockNavigationAsync : default(Func<LocationChangingContext, Task>);
}
<NavigationLock OnBeforeInternalNavigation="onBeforeInternalNavigation" ConfirmExternalNavigation="@locking">
</NavigationLock>

@code {

    public async Task BlockNavigationAsync(LocationChangingContext context)
    {
        if (!locking)
        {
            return;
        }
        context.PreventNavigation();

        await JSRuntime.InvokeVoidAsync("alert", "Locking your setup data, please hold on");
    }

    [Parameter, EditorRequired] public EventCallback<bool> Locking { get; set; }

    string visibleAria1 = "Unmask password for 5 seconds";
    string visibleAria2 = "Unmask confirm password for 5 seconds";

    string visibleIcon1 = "fa-solid fa-eye-slash";
    string visibleIcon2 = "fa-solid fa-eye-slash";

    string inputType1 = "password";
    string inputType2 = "password";

    bool field1Visible = false;
    bool field2Visible = false;

    Timer timer1;
    Timer timer2;

    StorageLockInputs model = null;
    protected override void OnInitialized()
    {
        base.OnInitialized();
        model = new StorageLockInputs() { IhdMacId = HouseholdState.Value.IhdMacId, Input1 = String.Empty, Input2 = String.Empty };
    }

    private async void OnValidSubmit()
    {
        try
        {
            locking = true;
            await Locking.InvokeAsync(true);
            SetVisibilityOff1();
            SetVisibilityOff2();
            await LockData();
        }
        catch (Exception ex)
        {
            lockingError = true;
            Logger.LogError(ex, "Error locking data");
            lockingErrorMessage = "Error locking data";
        }
        finally
        {
            locking = false;
            await Locking.InvokeAsync(false);
        }
    }


    private void ToggleTempVisibility1(MouseEventArgs mouseEventArgs)
    {
        field1Visible = !field1Visible;
        if (field1Visible)
        {
            SetVisibilityOn1();
        }
        else
        {
            SetVisibilityOff1();
        }
    }

    private void SetVisibilityOff1()
    {
        field1Visible = false;
        visibleIcon1 = "fa-solid fa-eye-slash";
        visibleAria1 = "Unmask password for 5 seconds";
        inputType1 = "password";
        DisposeTimer1();
    }

    private void SetVisibilityOff2()
    {
        field2Visible = false;
        visibleIcon2 = "fa-solid fa-eye-slash";
        visibleAria2 = "Unmask confirm password for 5 seconds";
        inputType2 = "password";
        DisposeTimer2();
    }

    private void SetVisibilityOn1()
    {
        field1Visible = true;
        visibleIcon1 = "fa-solid fa-eye icon-fade-out";
        visibleAria1 = "Hide unmasked password";
        inputType1 = "text";
        SetTimer1();
    }

    private void SetVisibilityOn2()
    {
        field2Visible = true;
        visibleIcon2 = "fa-solid fa-eye icon-fade-out";
        visibleAria2 = "Hide unmasked confirm password";
        inputType2 = "text";
        SetTimer2();
    }

    private void ToggleTempVisibility2(MouseEventArgs mouseEventArgs)
    {
        field2Visible = !field2Visible;
        if (field2Visible)
        {
            SetVisibilityOn2();
        }
        else
        {
            SetVisibilityOff2();
        }
    }

    private void SetTimer1()
    {
        DisposeTimer1();
        timer1 = new Timer(5000);
        timer1.Elapsed += OnVisibilityTimeUp1;
        timer1.AutoReset = false;
        timer1.Enabled = true;
        timer1.Start();
    }

    private void SetTimer2()
    {
        DisposeTimer1();
        timer2 = new Timer(5000);
        timer2.Elapsed += OnVisibilityTimeUp2;
        timer2.AutoReset = false;
        timer2.Enabled = true;
        timer2.Start();
    }

    private async void OnVisibilityTimeUp1(object sender, System.Timers.ElapsedEventArgs e)
    {
        DisposeTimer1();
        field1Visible = false;
        visibleIcon1 = "fa-solid fa-eye-slash";
        visibleAria1 = "Unmask password for 5 seconds";
        inputType1 = "password";
        await InvokeAsync(StateHasChanged);
    }

    private async void OnVisibilityTimeUp2(object sender, System.Timers.ElapsedEventArgs e)
    {
        DisposeTimer2();
        field2Visible = false;
        visibleIcon2 = "fa-solid fa-eye-slash";
        visibleAria2 = "Unmask confirm password for 5 seconds";
        inputType2 = "password";
        await InvokeAsync(StateHasChanged);
    }

    private void DisposeTimer1()
    {
        if (timer1 != null)
        {
            timer1.Enabled = false;
            timer1.Elapsed -= OnVisibilityTimeUp1;
            timer1.Dispose();
            timer1 = null;
        }
    }

    private void DisposeTimer2()
    {
        if (timer2 != null)
        {
            timer2.Enabled = false;
            timer2.Elapsed -= OnVisibilityTimeUp2;
            timer2.Dispose();
            timer2 = null;
        }
    }

    private bool _isDisposed;


    protected override void Dispose(bool isDisposing)
    {
        if (!_isDisposed)
        {
            if (isDisposing)
            {
                DisposeTimer1();
                DisposeTimer2();
                if (model != null)
                {
                    model.IhdMacId = null;
                    model.Input1 = null;
                    model.Input2 = null;
                    model = null;
                }
            }
            _isDisposed = true;
        }

        base.Dispose(isDisposing);

    }
}
