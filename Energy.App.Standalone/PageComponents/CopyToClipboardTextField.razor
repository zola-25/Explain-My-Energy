@implements IAsyncDisposable
<div class="d-flex flex-row flex-grow-1 justify-space-between align-end">
    <div class="flex-grow-1">
        @ChildContent
    </div>
    <div class="@TooltipWrapperClass">
        <MudTooltip Inline="true" Placement="Placement.Top">
            <TooltipContent>
                <MudText Typo="Typo.body2">@copyToClipboardTooltipField</MudText>
            </TooltipContent>
            <ChildContent>
                    <MudIconButton Color="Color.Info" Title="@($"{copyToClipboardTooltipField}?")" Icon="@copyToClipboardIcon" Size="Size.Small"
                        OnClick="CopyToClipboardClick" Variant="Variant.Outlined" />
            </ChildContent>
        </MudTooltip>
    </div>
</div>
    @code {

    [Parameter, EditorRequired] public RenderFragment ChildContent { get; set; }

    [Parameter, EditorRequired] public string CopyString { get; set; }

    [Parameter] public string TooltipWrapperClass { get; set; } = "ml-5";
    [Parameter] public string CopyToClipboardTooltip { get; set; } = "Copy to Clipboard";


    [Inject] IJSRuntime JS { get; set; }
    [Inject] ILogger<CopyToClipboardTextField> Logger { get; set; }

    string copyToClipboardTooltipField = "Copy to Clipboard";
    string copyToClipboardIcon = Icons.Material.Outlined.ContentCopy;

    private IJSObjectReference module;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        copyToClipboardTooltipField = CopyToClipboardTooltip;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import",
            "./PageComponents/CopyToClipboardTextField.razor.js");
        }
    }

    private async Task CopyToClipboardClick()
    {
        try
        {
            bool copied = await module.InvokeAsync<bool>("copyToClipboard", CopyString);

            if (copied)
            {
                copyToClipboardIcon = Icons.Material.Filled.CheckCircle;
                copyToClipboardTooltipField = "Copied";
                StateHasChanged();
                await Task.Delay(5000);
                copyToClipboardIcon = Icons.Material.Outlined.ContentCopy;
                copyToClipboardTooltipField = CopyToClipboardTooltip;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error when copying input field");
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            await module.DisposeAsync();
        }
    }
}
