@implements IAsyncDisposable

<MudPaper aria-label="Wizard step content" Elevation="2" Class="p-4">
    <MudGrid Justify="Justify.Center">
        <MudItem  xs="12">
            <div class="d-flex  justify-space-between align-center fw-bolder">
                <MudBreadcrumbs  aria-label="Wizard steps completed" Items="BreadcrumbItems" ExpanderIcon="fa-solid fa-left-right"  Class="d-flex flex-wrap fw-bolder" MaxItems="4">
                    <ItemTemplate  Context="item">
                        <MudText aria-label="@($"Wizard step {item.Text}")" Class="fw-bolder" Typo="Typo.h6">@item.Text</MudText>
                    </ItemTemplate>
                    <SeparatorTemplate>
                            <MudText Typo="Typo.h6" Class="fw-bolder">></MudText>
                    </SeparatorTemplate>
                </MudBreadcrumbs>

                <MudText Class="@((HeaderText is null) ? "d-none" : "fw-bold mx-auto")"
                         Align="Align.Center"
                         Typo="Typo.h5"
                         aria-label="Welcome">@HeaderText</MudText>
                <MudIconButton Class="flex-nowrap px-4 me-5" Color="Color.Dark" Size="Size.Large" Title="Exit Wizard" Icon="@Icons.Material.Filled.Close" OnClick="CloseWizardCallback"></MudIconButton>
            </div>
        </MudItem>
        <MudItem xs="12">
            @SetupStepPage

        </MudItem>
        <MudItem xs="12" aria-label="Wizard action buttons">
            @ActionButtons
        </MudItem>
    </MudGrid>
</MudPaper>
@code {
    [Inject] IJSRuntime JS { get; set; }

    [Parameter] public List<BreadcrumbItem> BreadcrumbItems { get; set; }

    [Parameter] public string HeaderText { get; set; }

    [Parameter, EditorRequired] public EventCallback CloseWizardCallback { get; set; }

    [Parameter, EditorRequired] public RenderFragment SetupStepPage { get; set; }

    [Parameter, EditorRequired] public RenderFragment ActionButtons { get; set; }

    [Parameter] public RenderFragment HeaderContent { get; set; }

    private IJSObjectReference module;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import",
                "./Pages/SetupWizard/Steps/StepTemplate.razor.js");
            await module.InvokeVoidAsync("scrollToTop");
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public async ValueTask DisposeAsync()
    {
        if (module is not null)
        {
            await module.DisposeAsync();
        }
    }
}