@inherits FluxorComponent

<MudPaper Class="py-0" Elevation="0" UserAttributes="@(new() { {"id","main-nav"}, {"role", "navigation" }, {"aria-label", "Main Site Links"}})">
    <MudNavMenu  Color="Color.Info" Bordered="true" Class="d-flex flex-column">

        <MudTooltip Text="@(!HouseholdSetupValid ? "Setup required" : "")" Placement="Placement.Right" RootClass="w-Inherit">

            <MudNavLink Href="/Setup"  Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.House" ActiveClass="active-navbar-item">

                @if (HouseholdSetupValid)
                {
                    <NavMenuNavLinkContent IconColor="Color.Success" SuffixIcon="@Icons.Material.Filled.Check">Setup</NavMenuNavLinkContent>
                }
                else
                {
                    <NavMenuNavLinkContent IconColor="Color.Warning" SuffixIcon="@Icons.Material.Filled.Settings">Setup</NavMenuNavLinkContent>
                }
            </MudNavLink>

        </MudTooltip>
        <MudDivider></MudDivider>

        <MudTooltip  Text="@ElectricityTooltipText()" Placement="Placement.Right"  RootClass="w-Inherit">
            <MudNavLink UserAttributes="@(new() {{"role", "link"}})" Disabled="ElectricityDisabled" Class="navbar-nav-item" Href="@ElectricityHref" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.ElectricBolt" ActiveClass="active-navbar-item">
                <NavMenuNavLinkContent SuffixIcon="@(HeatingMeterIsElectricity ? Icons.Material.Filled.Thermostat : "")">Electricity</NavMenuNavLinkContent>
            </MudNavLink>
        </MudTooltip>
        <MudTooltip Text="@GasTooltipText()" Placement="Placement.Right" RootClass="w-Inherit">
            <MudNavLink UserAttributes="@(new() {{"role", "link"}})"
                        Disabled="GasDisabled" 
                    Class="navbar-nav-item" 
                    Href="@GasHref" 
                    Match="NavLinkMatch.Prefix"
                    Icon="@Icons.Material.Filled.LocalFireDepartment" 
                    ActiveClass="active-navbar-item">
                <NavMenuNavLinkContent SuffixIcon="@(HeatingMeterIsGas ? Icons.Material.Filled.Thermostat : "")">Gas</NavMenuNavLinkContent>

            </MudNavLink>
        </MudTooltip>
    </MudNavMenu>
</MudPaper>

@code {

    [Inject]
    IState<HouseholdState> HouseholdState { get; set; }

    [Inject]
    IState<MeterSetupState> MeterSetupState { get; set; }

    MeterType HeaterMeterType => HouseholdState.Value.PrimaryHeatSource;

    bool GasDisabled => !MeterSetupState.Value[MeterType.Gas].Authorized || !MeterSetupState.Value[MeterType.Gas].SetupValid;
    bool ElectricityDisabled => !MeterSetupState.Value[MeterType.Electricity].Authorized || !MeterSetupState.Value[MeterType.Electricity].SetupValid;

    string GasHref => HeatingMeterIsGas ? "/HeatingMeter/Gas" : "/Meter/Gas";
    string ElectricityHref => HeatingMeterIsElectricity ? "/HeatingMeter/Electricity" : "/Meter/Electricity";


    private bool HeatingMeterIsElectricity => HouseholdState.Value.Saved && HouseholdState.Value.PrimaryHeatSource == MeterType.Electricity;
    private bool HeatingMeterIsGas => HouseholdState.Value.Saved && HouseholdState.Value.PrimaryHeatSource == MeterType.Gas;

    public string GasTooltipText()
    {
        return GasDisabled ? "Configure in Household Setup" : "Show analysis";
    }

    public string ElectricityTooltipText()
    {
        return ElectricityDisabled ? "Configure in Household Setup" : "Show analysis";
    }

    private bool HouseholdSetupValid => !HouseholdState.Value.Invalid && HouseholdState.Value.Saved;

}