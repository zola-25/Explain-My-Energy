@using Energy.App.Standalone.Features;
@using Energy.App.Standalone.Features.EnergyReadings.Store;
@using Fluxor.Blazor.Web.Components;
@using Fluxor.Persist.Middleware;
@using System.Collections.Immutable;
@inherits FluxorLayout
@inject IDispatcher Dispatcher

<MudThemeProvider Theme="_theme" />
<MudDialogProvider />
<MudSnackbarProvider />


<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <a href="/" style="text-decoration: none; color: inherit;"><MudText Typo="Typo.h5" Class="ml-3">Explain My Energy</MudText></a>
        <MudSpacer />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu></NavMenu>
    </MudDrawer>
    <MudMainContent>
        <MudContainer>
            @if (!Ready)
            {
                <MudGrid Justify="Justify.Center">
                    <MudItem xs="12">
                        <MudPaper Elevation="2">
                            <MudText Typo="Typo.h5">Loading...</MudText>
                            <MudProgressCircular StrokeWidth="8" Size="@Size.Large" Value="_progress" Color="Color.Primary">
                            </MudProgressCircular>
                        </MudPaper>
                    </MudItem>
                </MudGrid>
            }
            else
            {
                @Body
            }
        </MudContainer>
    </MudMainContent>
</MudLayout>


@code {

    [Inject] IAppInitialization AppInitialization { get; set; }
    [Inject]
    public IStateSelection<WeatherState, ImmutableList<DailyWeatherReading>> WeatherStateSelection { get; set; }

    [Inject]
    public IState<AppInitializationState> AppInitializationState { get; set; }


    public bool Ready => (!AppInitializationState.Value.WaitingForWeatherData
                            && !AppInitializationState.Value.WaitingForElectricityReadingsData
                            && !AppInitializationState.Value.WaitingForGasReadingsData
                            && !AppInitializationState.Value.WaitingForLinearCoefficients);
    double _progress = 10;

    protected override void OnInitialized()
    {
        _progress += 20;
        this.SubscribeToAction<InitializePersistMiddlewareResultSuccessAction>(result =>
        {

            Console.WriteLine($"**** State rehydrated**");
            _progress += 20;


            AppInitialization.Initialize();

            this.StateHasChanged();// we now have state, we can re-render to reflect binding changes

            _progress += 20;

        });

    }



    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private readonly MudTheme _theme = new()
        {
            Palette = new Palette()
            {
                Secondary = Colors.Orange.Lighten1,
                SecondaryContrastText = Colors.Shades.White,
                Tertiary = Colors.Orange.Darken4
            }
        };


}
