@using Energy.App.Standalone.Features;
@using Fluxor.Blazor.Web.Components;
@using Fluxor.Persist.Middleware;
@inherits FluxorLayout
@inject IDispatcher Dispatcher

<MudThemeProvider Theme="_theme" />
<MudDialogProvider />
<MudSnackbarProvider />


<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <a href="/" style="text-decoration: none; color: inherit;"><MudText Typo="Typo.h5" Class="ml-3">Explain My Energy</MudText></a>
        <MudSpacer />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu></NavMenu>
    </MudDrawer>
    <MudMainContent>
        <MudContainer>
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>


@code {

    [Inject] IAppInitialization AppInitialization { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        this.SubscribeToAction<InitializePersistMiddlewareResultSuccessAction>(result =>
        {
            Console.WriteLine($"**** State rehydrated**");
            AppInitialization.Initialize();
            this.StateHasChanged();// we now have state, we can re-render to reflect binding changes
        });
    }

    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private readonly MudTheme _theme = new()
        {
            Palette = new Palette()
            {
                Secondary = Colors.Orange.Lighten1,
                SecondaryContrastText = Colors.Shades.White,
                Tertiary = Colors.Orange.Darken4
            }
        };


}
