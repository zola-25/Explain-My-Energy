@using Energy.App.Standalone.Features.Analysis.Store.HeatingForecast;
@using Energy.App.Standalone.Features.AppInit.Store;
@using Energy.App.Standalone.Features.EnergyReadings.Electricity.Store;
@using Energy.App.Standalone.Features.EnergyReadings.Gas;
@using Microsoft.Extensions.FileSystemGlobbing.Abstractions
@inherits FluxorComponent
@inject IDispatcher Dispatcher

<MudPaper Elevation="2" Class="d-flex flex-column mx-auto justify-content-evenly mt-3">
    <MudCard>
        <MudCardHeader Class="justify-center">
            <MudText Typo="Typo.h4">Setup Status</MudText>
        </MudCardHeader>
        <MudCardContent Class="d-flex flex-column gap-3">

            @if (!AppValidationState.Value.AppStarted)
            {
                <MudAlert Severity="@Severity.Info" Elevation="2" Dense="@true">App starting...</MudAlert>
                <MudProgressLinear Size="Size.Large" Color="Color.Primary" Indeterminate="true"></MudProgressLinear>
            }

            @if (AppValidationState.Value.AppStarted)
            {
                @if (CanUpdateWeatherData)
                {
                    @if (!AppValidationState.Value.WeatherDataInitialized)
                    {
                        <MudAlert Severity="@Severity.Info" Elevation="2" Dense="@true">Loading weather data...</MudAlert>
                        <MudProgressLinear Size="Size.Large" Color="Color.Success" Indeterminate="true"></MudProgressLinear>
                    }
                    else
                    {
                        <MudAlert Severity="@Severity.Success" Elevation="2" Dense="@true">Weather data loaded</MudAlert>
                    }
                }
                else
                {
                    <MudAlert Severity="@Severity.Info" Elevation="2" Dense="@true">Setup your Household for local Weather Data</MudAlert>
                }

                @if (CanUpdateElectricityData)
                {
                    @if (!AppValidationState.Value.ElectricityDataInitialized)
                    {
                        <MudAlert Severity="@Severity.Info" Elevation="2" Dense="@true">Loading electricity data...</MudAlert>
                        <MudProgressLinear Size="Size.Large" Color="Color.Success" Indeterminate="true"></MudProgressLinear>
                    }
                    else
                    {
                        <MudAlert Severity="@Severity.Success" Elevation="2" Dense="@true">Electricity data loaded</MudAlert>
                    }
                }
                else
                {
                    <MudAlert Severity="@Severity.Info" Elevation="2" Dense="@true">Setup your Electricity Meter for consumption analysis</MudAlert>
                }

                @if (CanUpdateGasData)
                {
                    @if (!AppValidationState.Value.GasDataInitialized)
                    {
                        <MudAlert Severity="@Severity.Info" Elevation="2" Dense="@true">Loading gas data...</MudAlert>
                        <MudProgressLinear Size="Size.Large" Color="Color.Success" Indeterminate="true"></MudProgressLinear>
                    }
                    else
                    {
                        <MudAlert Severity="@Severity.Success" Elevation="2" Dense="@true">Gas data loaded</MudAlert>
                    }
                }
                else
                {
                    <MudAlert Severity="@Severity.Info" Elevation="2" Dense="@true">Setup your Gas Meter for consumption analysis</MudAlert>
                }
                @if (CanUpdateLinearCoefficients)
                {
                    @if (!AppValidationState.Value.ForecastInitialized)
                    {
                        <MudAlert Severity="@Severity.Info" Elevation="2" Dense="@true">Calculating weather/consumption relationship...</MudAlert>
                        <MudProgressLinear Size="Size.Large" Color="Color.Success" Indeterminate="true"></MudProgressLinear>
                    }
                    else
                    {
                        <MudAlert Severity="@Severity.Success" Elevation="2" Dense="@true">Weather/consumption relationship calculated</MudAlert>
                    }
                }
                else
                {
                    <MudAlert Severity="@Severity.Info" Elevation="2" Dense="@true">Setup your Heating Meter to see how weather changes affect your energy costs</MudAlert>
                }
            }

            
        </MudCardContent>
    </MudCard>


</MudPaper>


@code {

    int _loadingProgress = 0;

    [Inject]
    private AppStateValidator AppStateValidator { get; set; }

    [Inject]
    private IState<AppValidationState> AppValidationState { get; set; }

    [Inject]
    IState<HouseholdState> HouseholdState { get; set; }

    [Inject]
    IState<WeatherState> WeatherState { get; set; }

    [Inject]
    IState<MeterSetupState> MeterSetupState { get; set; }

    [Inject]
    IState<GasReadingsState> GasReadingsState { get; set; }

    [Inject]
    IState<ElectricityReadingsState> ElectricityReadingsState { get; set; }

    [Inject]
    IState<HeatingForecastState> HeatingForecastState { get; set; }

    bool CanUpdateWeatherData => HouseholdState.Value.Saved && !HouseholdState.Value.Invalid;
    bool CanUpdateElectricityData => MeterSetupState.Value.ElectricityMeter.SetupValid;
    bool CanUpdateGasData => MeterSetupState.Value.GasMeter.SetupValid;

    bool CanUpdateLinearCoefficients => CanUpdateWeatherData && MeterSetupState.Value[HouseholdState.Value.PrimaryHeatSource].
        SetupValid;






    private async Task WorkItem()
    {
        Console.WriteLine(DateTime.Now);
        Console.WriteLine(AppValidationState.Value);
        await Task.Yield();
        await Task.Delay(1);
        StateHasChanged();
        await Task.Delay(1);
    }


}