@using Energy.App.Standalone.Features.AppInit.Store
@using Energy.App.Standalone.Features.EnergyReadings.Store
@using Microsoft.Extensions.FileSystemGlobbing.Abstractions
@inherits FluxorComponent
@inject IDispatcher Dispatcher

<MudPaper Elevation="2" Class="d-flex flex-column mx-auto justify-content-evenly mt-3">
    <MudCard>
        <MudCardHeader Class="justify-center">
            <MudText Typo="Typo.h4">Setup Status</MudText>
        </MudCardHeader>
        <MudCardContent Class="d-flex flex-column gap-3">

            @if (!AppInitState.Value.AppStarted)
            {
                <MudAlert Severity="@Severity.Info" Elevation="2" Dense="@true">App starting...</MudAlert>
                <MudProgressLinear Size="Size.Large" Color="Color.Primary" Indeterminate="true"></MudProgressLinear>
            }

            @if (AppInitState.Value.AppStarted)
            {
                @if (CanUpdateWeatherData)
                {
                    @if (WeatherDataLoading)
                    {
                        <MudAlert Severity="@Severity.Info" Elevation="2" Dense="@true">Loading weather data...</MudAlert>
                        <MudProgressLinear Size="Size.Large" Color="Color.Success" Indeterminate="true"></MudProgressLinear>
                    }
                    else
                    {
                        <MudAlert Severity="@Severity.Success" Elevation="2" Dense="@true">Weather data loaded</MudAlert>
                    }
                }
                else
                {
                    <MudAlert Severity="@Severity.Info" Elevation="2" Dense="@true">Setup your Household for local Weather Data</MudAlert>
                }

                @if (CanUpdateElectricityData)
                {
                    @if (ElectricityDataLoading)
                    {
                        <MudAlert Severity="@Severity.Info" Elevation="2" Dense="@true">Loading electricity data...</MudAlert>
                        <MudProgressLinear Size="Size.Large" Color="Color.Success" Indeterminate="true"></MudProgressLinear>
                    }
                    else
                    {
                        <MudAlert Severity="@Severity.Success" Elevation="2" Dense="@true">Electricity data loaded</MudAlert>
                    }
                }
                else
                {
                    <MudAlert Severity="@Severity.Info" Elevation="2" Dense="@true">Setup your Electricity Meter for consumption analysis</MudAlert>
                }

                @if (CanUpdateGasData)
                {
                    @if (GasDataLoading)
                    {
                        <MudAlert Severity="@Severity.Info" Elevation="2" Dense="@true">Loading gas data...</MudAlert>
                        <MudProgressLinear Size="Size.Large" Color="Color.Success" Indeterminate="true"></MudProgressLinear>
                    }
                    else
                    {
                        <MudAlert Severity="@Severity.Success" Elevation="2" Dense="@true">Gas data loaded</MudAlert>
                    }
                }
                else
                {
                    <MudAlert Severity="@Severity.Info" Elevation="2" Dense="@true">Setup your Gas Meter for consumption analysis</MudAlert>
                }

                @if (CanUpdateLinearCoefficients)
                {
                    @if (LinearCoefficientsLoading)
                    {
                        <MudAlert Severity="@Severity.Info" Elevation="2" Dense="@true">Calculating weather/consumption relationship...</MudAlert>
                        <MudProgressLinear Size="Size.Large" Color="Color.Success" Indeterminate="true"></MudProgressLinear>
                    }
                    else
                    {
                        <MudAlert Severity="@Severity.Success" Elevation="2" Dense="@true">Weather/consumption relationship calculated</MudAlert>
                    }
                }
                else
                {
                    <MudAlert Severity="@Severity.Info" Elevation="2" Dense="@true">Setup your Heating Meter to see how weather changes affect your energy costs</MudAlert>
                }
            }

        </MudCardContent>
    </MudCard>


</MudPaper>


@code {

    int _loadingProgress = 0;

    [Inject]
    private IState<AppInitState> AppInitState { get; set; }

    [Inject]
    IState<HouseholdState> HouseholdState { get; set; }

    [Inject]
    IState<WeatherState> WeatherState { get; set; }

    [Inject]
    IState<MeterSetupState> MeterSetupState { get; set; }

    [Inject]
    IState<GasReadingsState> GasReadingsState { get; set; }

    [Inject]
    IState<ElectricityReadingsState> ElectricityReadingsState { get; set; }

    [Inject]
    IState<LinearCoefficientsState> LinearCoefficientsState { get; set; }

    bool CanUpdateWeatherData => HouseholdState.Value.Saved;
    bool CanUpdateElectricityData => MeterSetupState.Value.ElectricityMeter.SetupValid;
    bool CanUpdateGasData => MeterSetupState.Value.GasMeter.SetupValid;

    bool CanUpdateLinearCoefficients => MeterSetupState.Value[HouseholdState.Value.PrimaryHeatSource].
        SetupValid;

    bool WeatherDataLoading => WeatherState.Value.Loading || WeatherState.Value.Updating;
    bool ElectricityDataLoading => ElectricityReadingsState.Value.ReloadingReadings || ElectricityReadingsState.Value.UpdatingReadings || ElectricityReadingsState.Value.CalculatingCosts;
    bool GasDataLoading => GasReadingsState.Value.Reloading || GasReadingsState.Value.Updating || GasReadingsState.Value.CalculatingCosts;

    bool LinearCoefficientsLoading => !LinearCoefficientsState.Value.Saved;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        SubscribeToAction<InitializeAppAction>(_ => LoadAll());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(1000);
            Console.WriteLine(nameof(OnAfterRender));

            Dispatcher.Dispatch(new InitializeAppAction());
        }
    }

    private void LoadAll()
    {
        if (CanUpdateWeatherData)
        {
            InitializeWeather();
        }

        if (CanUpdateElectricityData)
        {
            InitializeElectricity();
        }

        if (CanUpdateGasData)
        {
            InitializeGas();
        }
        if (CanUpdateLinearCoefficients)
        {
            InitializeLinearCoefficients();
        }
    }

    private async Task WorkItem()
    {
        Console.WriteLine(DateTime.Now);
        Console.WriteLine(AppInitState.Value);
        await Task.Yield();
        await Task.Delay(1);
        StateHasChanged();
        await Task.Delay(1);
    }

    private void InitializeWeather()
    {
        if (!WeatherState.Value.WeatherReadings.Any())
        {
            Dispatcher.Dispatch(new InitiateWeatherReloadReadingsAction(HouseholdState.Value.OutCodeCharacters));
            return;
        }

        var latestReading = WeatherState.Value.WeatherReadings.FindLast(c => c.IsRecentForecast)?.
            UtcReadDate;
        var latestHistoricalReading = WeatherState.Value.WeatherReadings.FindLast(c => c.IsHistorical)?.
            UtcReadDate;

        if (latestReading < DateTime.UtcNow.Date.AddDays(-1))
        {
            Dispatcher.Dispatch(new InitiateWeatherUpdateReadingsAction(HouseholdState.Value.OutCodeCharacters,
                latestReading,
                latestHistoricalReading));
            return;
        }
    }

    private void InitializeGas()
    {
        if (GasReadingsState.Value.BasicReadings.Any())
        {
            DateTime lastReading = GasReadingsState.Value.BasicReadings.Last().
                UtcTime;
            if (lastReading < DateTime.Today.AddDays(-1))
            {
                Dispatcher.Dispatch(new GasUpdateReadingsAction(lastReading.Date));
            }
        }
        else
        {
            Dispatcher.Dispatch(new GasReloadReadingsAction());
        }

        Dispatcher.Dispatch(new GasInitiateCostCalculationsAction());
    }

    private void InitializeElectricity()
    {
        if (ElectricityReadingsState.Value.BasicReadings.Any())
        {
            DateTime lastReading = ElectricityReadingsState.Value.BasicReadings.Last().
                UtcTime;
            if (lastReading < DateTime.Today.AddDays(-1))
            {
                Dispatcher.Dispatch(new ElectricityUpdateReadingsAction(lastReading.Date));
            }
        }
        else
        {
            Dispatcher.Dispatch(new ElectricityReloadReadingsAction());
        }

        Dispatcher.Dispatch(new ElectricityInitiateCostCalculationsAction());
    }

    private void InitializeLinearCoefficients()
    {
        Dispatcher.Dispatch(new InitiateUpdateLinearCoefficientsAction());
    }

}