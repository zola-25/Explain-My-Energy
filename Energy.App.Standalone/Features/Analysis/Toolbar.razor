@inherits FluxorComponent
@inject IDispatcher Dispatcher

<MudToolBar WrapContent="true" Class="justify-space-between">
    <MudPaper Elevation="0" Class="d-flex align-center ma-2">

        <MudTooltip Placement="Placement.Top" Text="Chart kWh Consumption, or Costs with Tariff Details">
            <MudSwitch Checked="_costToggled"
                       T="bool"
                       CheckedChanged="OnToggledChanged"
                       Color="Color.Surface"
                       ThumbIcon="@(_costToggled ? Icons.Material.Filled.CurrencyPound : Icons.Material.Filled.ShowChart)"
                       UnCheckedColor="Color.Primary"
                       Label="@_costToggleLabelText"
                       LabelPosition="LabelPosition.Start" />
        </MudTooltip>
        <DocTooltipIcon DocSnippetHeader="Chart kWh vs Cost"
                        DocSnippetType="DocSnippetType.AnalysisOptionsChartKWhVsCost" IconTitle="Help for Switching between Chart kWh and Cost" />
    </MudPaper>


    <MudPaper Elevation="0" Class="term-mud-select-min-width d-flex align-center ma-2">
        <MudTooltip Placement="Placement.Top" Text="Show the analyses below as Day, Week or Month periods">

            <MudSelect  Class="w-100percent"
                       Value="_calendarTerm"
                       ValueChanged="TermChanged"
                       Label="Change Term"
                       Variant="Variant.Text"
                       T="CalendarTerm"
                       OpenIcon="@Icons.Material.Filled.AccessTime"
                       AdornmentColor="Color.Dark">
                @foreach (CalendarTerm term in Enum.GetValues(typeof(CalendarTerm)))
                {
                    <MudSelectItem Value="@term">@term.TermAdjective()</MudSelectItem>
                }
            </MudSelect>
        </MudTooltip>
        <DocTooltipIcon DocSnippetHeader="Aggregate Analysis Term"
                        DocSnippetType="DocSnippetType.AnalysisOptionsAnalysisTerm" IconTitle="Help for Setting Aggregate Analysis Term" />
    </MudPaper>

    @if (IsPrimaryHeatingSource)
    {
        <MudPaper Elevation="0" Class="d-flex align-center ma-2">

            <MudTooltip Placement="Placement.Top" Text="Forecast using Historical Moving Average, or the Temperature effect on your consumption. For warm weather periods, Historical Forecasts may be more accurate. For colder months, Temperature forecasts will show how your consumption increases as it gets colder.">
                <MudSwitch Checked="_historicalForecastToggled"
                           T="bool"
                           CheckedChanged="OnHistoricalForecastToggledChanged"
                           Color="Color.Surface"
                           ThumbIcon="@(_historicalForecastToggled ? Icons.Material.Filled.Timeline : Icons.Material.Filled.Thermostat)"
                           UnCheckedColor="Color.Secondary"
                           Label="@_historicalForecastToggleLabelText"
                           LabelPosition="LabelPosition.Start" />
            </MudTooltip>
            <DocTooltipIcon DocSnippetHeader="Temperature Forecast Toggle"
                            DocSnippetType="DocSnippetType.AnalysisOptionsTemperatureVsHistorical" IconTitle="Help for Switching between Historical and Temperature Forecasting" />
        </MudPaper>

        <MudPaper Elevation="0" Class="d-flex align-center ma-2">
            <MudTooltip Placement="Placement.Top" Text="If using Temperature Forecast, see how your consumption is effected by increasing or decreasing the daily forecast Temperature">
                <MudNumericField Value="@_degreesDifference"
                                 TextChanged="DegreeDifferenceChange"
                                 Immediate="true"
                                 Max="50"
                                 Min="-50"
                                 Format="+#;-#;0"
                                 AdornmentAriaLabel="Degrees Celsius"
                                 Class="right-align-input w-150px"
                                 T="decimal"
                                 Label="Adjust Forecast" Variant="Variant.Text"
                                 Step="1"
                                 Adornment="Adornment.End"
                                 AdornmentText="°C" />
            </MudTooltip>
            <DocTooltipIcon DocSnippetHeader="Adjusting Forecast Temperature"
                            DocSnippetType="DocSnippetType.AnalysisOptionsAdjustingForecast" IconTitle="Help for Adjusting Forecast Temperature" />
        </MudPaper>
    }
</MudToolBar>

@code {

    [Parameter, EditorRequired] public bool IsPrimaryHeatingSource { get; set; }

    [Parameter, EditorRequired] public MeterType MeterType { get; set; }

    AnalysisOptionsActionFactory AnalysisOptionsActionFactory { get; set; }

    [Inject] IState<AnalysisOptionsState> AnalysisOptionsState { get; set; }

    MeterAnalysisOptions MeterAnalysisOptions => AnalysisOptionsState.Value[MeterType];


    CalendarTerm _calendarTerm;

    bool _costToggled;
    bool _historicalForecastToggled;
    string _costToggleLabelText => _costToggled ? "Chart Diplaying Costs" : "Chart Diplaying kWh";
    string _historicalForecastToggleLabelText => _historicalForecastToggled ? "Using Historical Forecasts" : "Using Temperature Forecasts";

    protected override void OnParametersSet()
    {
        AnalysisOptionsActionFactory = new AnalysisOptionsActionFactory(MeterType);
        _firstSet = true;


        _costToggled = AnalysisOptionsState.Value[MeterType].ShowCost;
        _calendarTerm = AnalysisOptionsState.Value[MeterType].CalendarTerm;
        _historicalForecastToggled = AnalysisOptionsState.Value[MeterType].UseHistoricalForecast;
    }

    private void OnHistoricalForecastToggledChanged(bool on)
    {
        var action = AnalysisOptionsActionFactory.Create(AnalysisAction.UseHistoricalForecast, on);

        Dispatcher.Dispatch(action);

        _historicalForecastToggled = on;
    }

    private void OnToggledChanged(bool on)
    {
        var action = AnalysisOptionsActionFactory.Create(AnalysisAction.ShowCost, on);

        Dispatcher.Dispatch(action);

        _costToggled = on;
    }

    private void TermChanged(CalendarTerm newTerm)
    {
        var action = AnalysisOptionsActionFactory.Create(AnalysisAction.SetCalenderTerm, newTerm);

        Dispatcher.Dispatch(action);
        _calendarTerm = newTerm;
    }

    bool _firstSet = true;
    decimal _degreesDifference => MeterAnalysisOptions.DegreeDifference;


    private void DegreeDifferenceChange(string degreesFromForecastString)
    {
        if (_firstSet)
        {
            _firstSet = false;
            return;
        }
        if (String.IsNullOrWhiteSpace(degreesFromForecastString))
        {
            degreesFromForecastString = "0";
        }

        var degreeDifference = Convert.ToDecimal(degreesFromForecastString);

        if (Math.Abs(degreeDifference - _degreesDifference) < 0.5m)
        {
            return;
        }

        var action = AnalysisOptionsActionFactory.Create(AnalysisAction.SetDegreeDifference, degreeDifference);

        Dispatcher.Dispatch(action);
    }

}
