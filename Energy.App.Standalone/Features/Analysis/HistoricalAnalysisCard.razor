@    using Energy.App.Blazor.Client.Services.Analysis.Data
@    using Energy.App.Blazor.Client.Services.Analysis
@    using System.Runtime.InteropServices
@implements IDisposable
<MudCard Elevation="2">
        
    <MudCardContent>
        <MudPaper Class="d-flex flex-column flex-grow-1 m-1" Elevation="0">
            <MudText Typo="Typo.h5">@_headerText</MudText>
            <MudText Typo="Typo.h5">@_headerText</MudText>
            <MudText Typo="Typo.h5">@_headerText</MudText>
            <MudText Typo="Typo.h5">@_headerText</MudText>
            <MudText Typo="Typo.h5">@_headerText</MudText>


            <MudText Typo="Typo.caption">@DurationAnalysis.DateRangeText</MudText>
        </MudPaper>
        <MudPaper Class="d-flex justify-start flex-wrap" Elevation="0">

            <MudChip Style="pointer-events: none; background-color: transparent;" Icon="@Icons.Material.Filled.CurrencyPound">@DurationAnalysis.PeriodCost.eToMoneyFormat()</MudChip>
            <MudChip Style="pointer-events: none; background-color: transparent;" Icon="@_consumptionIcon">@DurationAnalysis.PeriodConsumptionKWh kWh</MudChip>
            <MudChip Style="pointer-events: none; background-color: transparent;" Icon="@Icons.Material.Filled.SouthAmerica" Label="true">@DurationAnalysis.PeriodCo2 kgCO<sub>2</sub></MudChip>

        </MudPaper>
        @if (PrimaryHeatSource)
        {
            <MudDivider DividerType="DividerType.Middle"></MudDivider>
            <MudPaper Class="my-2 d-flex justify-center" Elevation="0">

                <MudChip Icon="@Icons.Material.Filled.Thermostat" Color="Color.Transparent" Style="@DurationAnalysis.TemperatureRange.TemperatureColourStyle">@DurationAnalysis.TemperatureRange.TemperatureText</MudChip>

            </MudPaper>
        }
        <MudDivider DividerType="DividerType.Middle"></MudDivider>
        <MudDivider DividerType="DividerType.Middle"></MudDivider>

        <MudDivider DividerType="DividerType.Middle"></MudDivider>
        <MudDivider DividerType="DividerType.Middle"></MudDivider>


        <MudCardActions Class="d-flex justify-center">
                <MudChip Icon="@Icons.Material.Filled.Thermostat" Color="Color.Transparent" Style="@DurationAnalysis.TemperatureRange.TemperatureColourStyle">@DurationAnalysis.TemperatureRange.TemperatureText</MudChip>
                <MudChip Icon="@Icons.Material.Filled.Thermostat" Color="Color.Transparent" Style="@DurationAnalysis.TemperatureRange.TemperatureColourStyle">@DurationAnalysis.TemperatureRange.TemperatureText</MudChip>
                <MudChip Icon="@Icons.Material.Filled.Thermostat" Color="Color.Transparent" Style="@DurationAnalysis.TemperatureRange.TemperatureColourStyle">@DurationAnalysis.TemperatureRange.TemperatureText</MudChip>
                <MudChip Icon="@Icons.Material.Filled.Thermostat" Color="Color.Transparent" Style="@DurationAnalysis.TemperatureRange.TemperatureColourStyle">@DurationAnalysis.TemperatureRange.TemperatureText</MudChip>
                
            
            <MudToggleIconButton Toggled="_highlightToggled"
                                 ToggledChanged="ToggleHighlight"
                                 Variant="Variant.Filled"
                                 Icon="@Icons.Material.Filled.ZoomIn" Color="@Color.Secondary" 
                                 Title="Highlight"
                                 ToggledIcon="@Icons.Material.Filled.ZoomOut"
                                 ToggledColor="@Color.Dark" ToggledTitle="Highligted"/>


        </MudCardActions>
    </MudCardContent>
</MudCard>

<div> Hi </div>
<div> Hi </div>


<div> Hi </div>
<div> Hi </div>


@code {
    [Parameter, EditorRequired] public bool PrimaryHeatSource { get; set; }
    [Parameter, EditorRequired] public MeterType MeterType { get; set; }
    [Parameter, EditorRequired] public CalendarTerm Term { get; set; }
    [Parameter, EditorRequired] public RelativePeriod Period { get; set; }

    [Parameter, EditorRequired] public HistoricalAnalysis DurationAnalysis { get; set; }

    [Inject] AnalysisOptions AnalysisOptions { get; set; }


    string _consumptionIcon = Icons.Material.Filled.ElectricBolt;
    string _headerText;
    private bool _highlightToggled;


    private Task HighlightRangeChanged(DateTime startDate, DateTime endDate)
    {
        _highlightToggled = false;
        StateHasChanged();
        return Task.CompletedTask;
    }

    protected override void OnParametersSet()
    {
        _headerText = Term.AnalysisPeriodHeader(Period, DurationAnalysis.Start);
        _consumptionIcon = MeterType == MeterType.Electricity ? Icons.Material.Filled.ElectricBolt : Icons.Material.Filled.LocalFireDepartment;
    }

    private async Task ToggleHighlight(bool toggled)
    {
        if (toggled)
        {
            await AnalysisOptions[MeterType].SetHighlightRange(DurationAnalysis.Start, DurationAnalysis.End);
            AnalysisOptions[MeterType].NotifySetHighlightRange += HighlightRangeChanged;
        }
        else
        {
            await AnalysisOptions[MeterType].RemoveHighlightRange();
            AnalysisOptions[MeterType].NotifySetHighlightRange -= HighlightRangeChanged;
        }
        _highlightToggled = toggled;

    }


    public void Dispose()
    {
        AnalysisOptions[MeterType].NotifySetHighlightRange -= HighlightRangeChanged;
    }

}
