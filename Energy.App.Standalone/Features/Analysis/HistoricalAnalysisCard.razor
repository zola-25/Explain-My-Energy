@using Energy.App.Standalone.Features.Analysis.Services.Analysis;
@inherits FluxorComponent
@inject IDispatcher Dispatcher

<MudCard Elevation="2">
        
    <MudCardContent>
        <MudPaper Class="d-flex flex-column flex-grow-1 m-1" Elevation="0">
            <MudText Typo="Typo.h5">@_headerText</MudText>

            <MudText Typo="Typo.caption">@_rangeText</MudText>
        </MudPaper>
        <MudPaper Class="d-flex justify-start flex-wrap" Elevation="0">

            <MudChip Style="pointer-events: none; background-color: transparent;" Icon="@Icons.Material.Filled.CurrencyPound">@DurationAnalysis.PeriodCostPounds.eToMoneyFormat()</MudChip>
            <MudChip Style="pointer-events: none; background-color: transparent;" Icon="@_consumptionIcon">@DurationAnalysis.PeriodConsumptionKWh kWh</MudChip>
            <MudChip Style="pointer-events: none; background-color: transparent;" Icon="@Icons.Material.Filled.SouthAmerica" Label="true">@DurationAnalysis.PeriodCo2 kgCO<sub>2</sub></MudChip>

        </MudPaper>
        @if (PrimaryHeatSource)
        {
            <MudDivider DividerType="DividerType.Middle"></MudDivider>
            <MudPaper Class="my-2 d-flex justify-center" Elevation="0">

                <MudChip Icon="@Icons.Material.Filled.Thermostat" Color="Color.Transparent" Style="@DurationAnalysis.TemperatureRange.TemperatureColourStyle">@DurationAnalysis.TemperatureRange.TemperatureText</MudChip>

            </MudPaper>
        }
        <MudDivider DividerType="DividerType.Middle"></MudDivider>

        <MudCardActions Class="d-flex justify-center">
            
            <MudToggleIconButton Toggled="_highlightToggled"
                                 ToggledChanged="ToggleHighlight"
                                 Variant="Variant.Filled"
                                 Icon="@Icons.Material.Filled.ZoomIn" Color="@Color.Secondary" 
                                 Title="Highlight"
                                 ToggledIcon="@Icons.Material.Filled.ZoomOut"
                                 ToggledColor="@Color.Dark" ToggledTitle="Highligted"/>


        </MudCardActions>
    </MudCardContent>
</MudCard>


@code {
    [Parameter, EditorRequired] public bool PrimaryHeatSource { get; set; }
    [Parameter, EditorRequired] public MeterType MeterType { get; set; }
    [Parameter, EditorRequired] public CalendarTerm Term { get; set; }
    [Parameter, EditorRequired] public RelativePeriod Period { get; set; }

    [Parameter, EditorRequired] public HistoricalAnalysis DurationAnalysis { get; set; }

    [Inject] IState<AnalysisOptionsState> AnalysisOptionsState { get; set; }
    AnalysisOptionsActionFactory _analysisOptionsActionFactory;


    string _consumptionIcon = Icons.Material.Filled.ElectricBolt;
    string _headerText;
    bool _highlightToggled;
    private string _rangeText;
    private string _temperatureText;


    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        _analysisOptionsActionFactory = new AnalysisOptionsActionFactory(MeterType);

        _headerText = Term.AnalysisPeriodHeader(Period, DurationAnalysis.Start);
        _rangeText = Term.AnalysisPeriodDateRangeText(Period, DurationAnalysis.Start, DurationAnalysis.End);
        _temperatureText = Term.AnalysisPeriodTemperatureText(Period, DurationAnalysis.TemperatureRange);
        
        _consumptionIcon = MeterType == MeterType.Electricity ? Icons.Material.Filled.ElectricBolt : Icons.Material.Filled.LocalFireDepartment;
        _highlightToggled = AnalysisOptionsState.Value[MeterType].ToggleSource == ToggleSource.Historical;

    }

    private void ToggleHighlight(bool toggled)
    {
        if (toggled)
        {
            var setHighlightAction = _analysisOptionsActionFactory.Create(AnalysisAction.SetHighlightRange, ToggleSource.Historical, DurationAnalysis.Start, DurationAnalysis.End);
            Dispatcher.Dispatch(setHighlightAction);
        }
        else
        {
            var clearHighlightAction = _analysisOptionsActionFactory.Create(AnalysisAction.RemoveHighlightRange);
            Dispatcher.Dispatch(clearHighlightAction);
        }
        _highlightToggled = toggled;
    }


}
