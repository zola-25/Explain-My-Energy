@using Energy.App.Standalone.Features.Analysis.Services.Analysis
@inherits FluxorComponent
@inject IDispatcher Dispatcher

<MudCard Elevation="2">
    <MudCardContent>
        <MudPaper Class="d-flex flex-column flex-grow-1 ma-1" Elevation="0">
            <MudText Typo="Typo.h5">@_headerText</MudText>
            <MudText Typo="Typo.caption">@_rangeText</MudText>
        </MudPaper>

        @if (Term != CalendarTerm.Day)
        {
            <MudText Class="ml-1" Typo="Typo.caption">
                <strong>To Date</strong>
            </MudText>
            <MudPaper Class="d-flex justify-start flex-wrap" Elevation="0">
                <MudChip Class="info-chip" Icon="@Icons.Material.Filled.CurrencyPound">@CurrentPeriodAnalysisToDate.PeriodCostPounds.eToMoneyFormat()</MudChip>
                <MudChip Class="info-chip" Icon="@Icons.Material.Filled.SouthAmerica">@CurrentPeriodAnalysisToDate.PeriodCo2 kgCO<sub>2</sub></MudChip>
            </MudPaper>
        }
        <MudText Class="ml-1" Typo="Typo.caption">
            <strong>@Term.TermAdjective() Forecast</strong>
        </MudText>

        <MudPaper Class="d-flex justify-start flex-wrap" Elevation="0">

            <MudChip Class="info-chip" Icon="@Icons.Material.Filled.CurrencyPound">@CurrentPeriodForecastAnalysis.ForecastCostPounds.eToMoneyFormat()</MudChip>
            <MudChip Class="info-chip" Icon="@_consumptionIcon">@CurrentPeriodForecastAnalysis.ForecastConsumption kWh</MudChip>
            <MudChip Class="info-chip" Icon="@Icons.Material.Filled.SouthAmerica">@CurrentPeriodForecastAnalysis.ForecastCo2 kgCO<sub>2</sub></MudChip>
        </MudPaper>

        @if (PrimaryHeatSource)
        {
            <MudDivider DividerType="DividerType.Middle"></MudDivider>
            <MudPaper Class="my-2 d-flex justify-center" Elevation="0">
                @* TODO *@
                <MudChip Icon="@Icons.Material.Filled.Thermostat" Color="Color.Transparent" Style="@CurrentPeriodForecastAnalysis.TemperatureRange.TemperatureColourStyle">@_temperatureText</MudChip>

            </MudPaper>
        }
        <MudDivider DividerType="DividerType.Middle"></MudDivider>
        <MudCardActions Class="d-flex justify-center">

            <MudToggleIconButton Toggled="_highlightToggled"
                                 ToggledChanged="ToggleHighlight"
                                 Variant="Variant.Filled"
                                 Icon="@Icons.Material.Filled.ZoomIn" Color="@Color.Secondary"
                                 Title="Zoom in"
                                 ToggledIcon="@Icons.Material.Filled.ZoomOut"
                                 ToggledColor="@Color.Tertiary" ToggledTitle="Zoom out" />
        </MudCardActions>
    </MudCardContent>
</MudCard>

@code {

    [Parameter, EditorRequired]
    public bool PrimaryHeatSource { get; set; }

    [Parameter, EditorRequired]
    public MeterType MeterType { get; set; }

    [Parameter, EditorRequired]
    public CalendarTerm Term { get; set; }

    [Parameter, EditorRequired]
    public HistoricalAnalysis CurrentPeriodAnalysisToDate { get; set; }

    [Parameter, EditorRequired]
    public ForecastAnalysis CurrentPeriodForecastAnalysis { get; set; }

    [Inject]
    IState<AnalysisOptionsState> AnalysisOptionsState { get; set; }

    AnalysisOptionsActionFactory _analysisOptionsActionFactory;

    string _consumptionIcon = Icons.Material.Filled.ElectricBolt;
    string _headerText;
    private string _rangeText;
    private string _temperatureText;
    
    private bool _highlightToggled;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        _analysisOptionsActionFactory = new AnalysisOptionsActionFactory(MeterType);
        _headerText = Term.AnalysisPeriodHeader(RelativePeriod.Current, CurrentPeriodAnalysisToDate.Start);
        _rangeText = Term.AnalysisPeriodDateRangeText(RelativePeriod.Current, CurrentPeriodForecastAnalysis.Start, CurrentPeriodForecastAnalysis.End);
        _temperatureText = Term.AnalysisPeriodTemperatureText(RelativePeriod.Current, CurrentPeriodForecastAnalysis.TemperatureRange);
        _consumptionIcon = MeterType == MeterType.Electricity ? Icons.Material.Filled.ElectricBolt : Icons.Material.Filled.LocalFireDepartment;

        _highlightToggled = AnalysisOptionsState.Value[MeterType].ToggleSource == ToggleSource.Current;
    }

    private void ToggleHighlight(bool toggled)
    {
        if (toggled)
        {
            var setHighlightAction = _analysisOptionsActionFactory.Create(AnalysisAction.SetHighlightRange, ToggleSource.Current, CurrentPeriodAnalysisToDate.Start, CurrentPeriodForecastAnalysis.End);
            Dispatcher.Dispatch(setHighlightAction);
        }
        else
        {
            var clearHighlightAction = _analysisOptionsActionFactory.Create(AnalysisAction.RemoveHighlightRange);
            Dispatcher.Dispatch(clearHighlightAction);
        }

        _highlightToggled = toggled;
    }

}