@inherits FluxorComponent
@implements IAsyncDisposable
@inject IJSRuntime JsRuntime
@inject ILogger<EnergyTemperatureChart> Logger
@if (_ready)
{
    <h1>Hi</h1>
    <div id="profile-chart-meter-@MeterGlobalId" style="width: 100%; height: 500px; max-width: 100%">
    </div>
}

@code {

    [Parameter, EditorRequired]
    public MeterType MeterType { get; set; }

    [Inject]
    IState<AnalysisOptionsState> AnalysisOptions { get; set; }

    [Inject]
    IState<MeterSetupState> MeterSetupState { get; set; }

    [Inject]
    IState<ElectricityReadingsState> ElectricityReadingsState { get; set; }

    [Inject]
    IState<GasReadingsState> GasReadingsState { get; set; }


    [Inject]
    IState<WeatherState> WeatherState { get; set; }

    [Inject]
    IState<HeatingForecastState> HeatingForecastState { get; set; }


    [Inject]
    IState<HistoricalForecastState> HistoricalForecastState { get; set; }

    bool _chartRendered;

    private bool _ready;

    private Guid MeterGlobalId => MeterSetupState.Value[MeterType].GlobalId;

    protected override void OnParametersSet()
    {
        switch (MeterType)
        {
            case MeterType.Electricity:
                SubscribeToAction<ElectricityAnalysisOptionsSetHighlightRangeAction>(action => OnHighlightRangeHandler(action.Start, action.End));
                SubscribeToAction<ElectricityAnalysisOptionsRemoveHighlightRangeAction>(_ => OnRemoveHighlightRangeHandler());
                SubscribeToAction<ElectricityAnalysisOptionsShowCostAction>(c => OnToggledCostChangedHandler(c.ShowCost));
                SubscribeToAction<ElectricityAnalysisOptionsUseHistoricalForecastAction>(c => OnUseHistoricalForecastHandler(c.UseHistoricalForecast));
                break;
            case MeterType.Gas:
                SubscribeToAction<GasAnalysisOptionsSetHighlightRangeAction>(action => OnHighlightRangeHandler(action.Start, action.End));
                SubscribeToAction<GasAnalysisOptionsRemoveHighlightRangeAction>(_ => OnRemoveHighlightRangeHandler());
                SubscribeToAction<GasAnalysisOptionsShowCostAction>(c => OnToggledCostChangedHandler(c.ShowCost));
                SubscribeToAction<GasAnalysisOptionsUseHistoricalForecastAction>(c => OnUseHistoricalForecastHandler(c.UseHistoricalForecast));
                break;

            default:
                throw new ArgumentOutOfRangeException();
        }
        SubscribeToAction<NotifyHeatingForecastReadyAction>(a => OnDegreeDifferenceHandler(a.DegreeDifference));
        _ready = true;
    }

    DateTime _latestReadingTime;

    private List<ChartDailyForecastReading> GetChartDailyForecastReadings(DateTime latestReadingTime, ImmutableList<DailyCostedReading> forecastDailyCosts)
    {
        var latestReadingWeekStart = latestReadingTime.eStartOfWeek(DayOfWeek.Monday);

        var lastDate = forecastDailyCosts.Last().UtcTime.eStartOfWeek(DayOfWeek.Monday).AddDays(-1);
        var applicableForecastCosts = forecastDailyCosts.Where(c => c.UtcTime >= latestReadingWeekStart && c.UtcTime <= lastDate);

        var forecastChartReadings = applicableForecastCosts.Select(Mapping.MapToChartReading).ToList();
        return forecastChartReadings;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var costedReadings = MeterType switch
            {
                MeterType.Gas => GasReadingsState.Value.CostedReadings,
                MeterType.Electricity => ElectricityReadingsState.Value.CostedReadings,
                _ => throw new ArgumentOutOfRangeException()
            };

            var latestReading = costedReadings.Last();
            var firstReading = costedReadings.First();

            var chartReadings = costedReadings.Select(Mapping.MapToChartReading).ToList();

            var forecastReadingsState = AnalysisOptions.Value[MeterType].UseHistoricalForecast ?
                        HistoricalForecastState.Value[MeterType]
                        : HeatingForecastState.Value.ForecastDailyCosts;

            var forecastChartReadings = GetChartDailyForecastReadings(latestReading.UtcTime, forecastReadingsState);

            var firstReadingTicks = firstReading.UtcTime.eToUnixTicksNoOffset();
            var latestReadingTicks = chartReadings.Last().DateTicks;

            var temperatureIconPoints = WeatherState.Value.WeatherReadings
                .Where(c => c.UtcTime.eToUnixTicksNoOffset() >= firstReadingTicks
                        && c.UtcTime.eToUnixTicksNoOffset() <= latestReadingTicks)
                .Select(c => new TemperaturePoint()
                    {
                        DateTicks = c.UtcTime.eToUnixTicksNoOffset(),
                        TemperatureCelsius = c.TemperatureAverage,
                        TemperatureCelsiusUnmodified = c.TemperatureAverage,
                        Summary = c.Summary ?? string.Empty,

                    }).ToList();

            temperatureIconPoints.AddRange(HeatingForecastState.Value.ForecastWeatherReadings);

            bool highlightSet = AnalysisOptions.Value[MeterType].HighlightSet;
            var meterChartProfile = new MeterChartProfile()
                {
                    ShowCost = AnalysisOptions.Value[MeterType].ShowCost,
                    GlobalId = MeterGlobalId,
                    LatestReading = latestReadingTicks,
                    MostRecentWeekStart = latestReadingTicks,
                    ProfileStart = chartReadings.First().DateTicks,
                    OneMonthInTheFuture = latestReading.UtcTime.AddMonths(1).eToUnixTicksNoOffset(),
                    ProfileEnd = temperatureIconPoints.Last().DateTicks,
                    ChartReadings = chartReadings,
                    ChartDailyForecastReadings = forecastChartReadings,
                    HighlightStart = highlightSet ? AnalysisOptions.Value[MeterType].HighlightStart?.eToUnixTicksNoOffset() : null,
                    HighlightEnd = highlightSet ? AnalysisOptions.Value[MeterType].HighlightEnd?.eToUnixTicksNoOffset() : null,
                };

            _latestReadingTime = latestReading.UtcTime;


            await JsRuntime.InvokeVoidAsync("ChartFunctions.setChart", $"profile-chart-meter-{MeterGlobalId}", meterChartProfile, temperatureIconPoints);


            _chartRendered = true;
        }
    }

    private async void OnHighlightRangeHandler(DateTime start, DateTime end)
    {
        try
        {
            if (!_chartRendered)
            {
                return;
            }

            long startTicks = start.eToUnixTicksNoOffset();
            long endTicks = end.eToUnixTicksNoOffset();


            await JsRuntime.InvokeVoidAsync(
                "ChartFunctions.highlightRange",
                $"profile-chart-meter-{MeterGlobalId}",
                startTicks,
                endTicks);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, ex.Message);
        }
    }

    private async void OnRemoveHighlightRangeHandler()
    {
        try
        {
            if (!_chartRendered)
            {
                return;
            }

            await JsRuntime.InvokeVoidAsync("ChartFunctions.removeHighlight", $"profile-chart-meter-{MeterGlobalId}");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, ex.Message);
        }
    }

    private async void OnUseHistoricalForecastHandler(bool useHistoricalForecast)
    {
        try
        {
            if (!_chartRendered)
            {
                return;
            }
            var forecastReadingsState = useHistoricalForecast ? HistoricalForecastState.Value[MeterType] : HeatingForecastState.Value.ForecastDailyCosts;
            var chartForecastReadings = GetChartDailyForecastReadings(_latestReadingTime, forecastReadingsState);

            var degreeDifference = AnalysisOptions.Value[MeterType].DegreeDifference;
            await JsRuntime.InvokeVoidAsync("ChartFunctions.setForecastSeries", $"profile-chart-meter-{MeterGlobalId}", chartForecastReadings, degreeDifference);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, ex.Message);
        }
    }

    private async void OnDegreeDifferenceHandler(decimal degreeDifference)
    {
        try
        {
            if (!_chartRendered)
            {
                return;
            }

            var forecastReadingsState = AnalysisOptions.Value[MeterType].UseHistoricalForecast ?
                        HistoricalForecastState.Value[MeterType]
                        : HeatingForecastState.Value.ForecastDailyCosts;

            var chartForecastReadings = GetChartDailyForecastReadings(_latestReadingTime, forecastReadingsState);


            await JsRuntime.InvokeVoidAsync("ChartFunctions.setForecastSeries",
                    $"profile-chart-meter-{MeterGlobalId}",
                    chartForecastReadings, degreeDifference);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, ex.Message);
        }
    }

    private async void OnToggledCostChangedHandler(bool showCost)
    {
        try
        {
            if (!_chartRendered)
            {
                return;
            }
            await JsRuntime.InvokeVoidAsync("ChartFunctions.toggleCostSeries", $"profile-chart-meter-{MeterGlobalId}", showCost);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, ex.Message);
        }
    }

    public async ValueTask DisposeAsync()
    {
        await JsRuntime.InvokeVoidAsync("ChartFunctions.dispose", $"profile-chart-meter-{MeterGlobalId}");
    }

}