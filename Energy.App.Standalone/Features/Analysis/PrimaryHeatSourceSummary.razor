@inherits FluxorComponent
@inject IDispatcher Dispatcher


@if(_ready) {
    <MudItem xs="12" sm="6" md="4">
        <HistoricalAnalysisCard PrimaryHeatSource="true"
                                Term="_calenderTerm"
                                MeterType="MeterType"
                                DurationAnalysis="_previousDurationAnalysis">
        </HistoricalAnalysisCard>
    </MudItem>
    <MudItem xs="12" sm="6" md="4">
        <CurrentPeriodAnalysisCard PrimaryHeatSource="true"
                                   Term="_calenderTerm"
                                   MeterType="MeterType"
                                   CurrentPeriodForecastAnalysis="_currentTermForecastAnalysis"
                                   CurrentPeriodAnalysisToDate="_thisDurationAnalysis">
        </CurrentPeriodAnalysisCard>
    </MudItem>
    <MudItem xs="12" sm="6" md="4">
        <ForecastCard PrimaryHeatSource="true"
                      Term="_calenderTerm"
                      ForecastAnalysis="_nextTermForecastAnalysis"
                      MeterType="MeterType">
        </ForecastCard>
    </MudItem>
}

@code {

    [Parameter, EditorRequired]
    public MeterType MeterType { get; set; }


    [Inject]
    IState<AnalysisOptionsState> AnalysisOptionsState { get; set; }

    [Inject]
    ITempForecastSummarizer TempForecastAnalyzer { get; set; }

    [Inject]
    IHistoricalConsumptionSummarizer HistoricalDataAnalyzer { get; set; }


    [Inject]
    IState<ElectricityReadingsState> ElectricityReadingsState { get; set; }

    [Inject]
    IState<GasReadingsState> GasReadingsState { get; set; }



    CalendarTerm _calenderTerm;
    decimal _degreeDifference;
    bool _useHistoricalForcast;

    bool _ready;

    HistoricalAnalysis _thisDurationAnalysis;
    HistoricalAnalysis _previousDurationAnalysis;

    ForecastAnalysis _currentTermForecastAnalysis;
    ForecastAnalysis _nextTermForecastAnalysis;


    protected override void OnParametersSet()
    {
        _ready = false;
        var initialMeterAnalysisOptions = AnalysisOptionsState.Value[MeterType];


        _calenderTerm = initialMeterAnalysisOptions.CalendarTerm;
        _degreeDifference = initialMeterAnalysisOptions.DegreeDifference;
        _useHistoricalForcast = initialMeterAnalysisOptions.UseHistoricalForecast;

        SetHistoricalAnalyses();

        switch (MeterType)
        {
            case MeterType.Electricity:

                SubscribeToAction<ElectricityAnalysisOptionsSetCalenderTermAction>(
                    action =>
                    {
                        _calenderTerm = action.CalendarTerm;
                        SetHistoricalAnalyses();
                        SetForecastAnalyses();
                    });
                SubscribeToAction<ElectricityAnalysisOptionsUseHistoricalForecastAction>(
                    action =>
                    {
                        _useHistoricalForcast = action.UseHistoricalForecast;
                        SetForecastAnalyses();
                    });
                break;
            case MeterType.Gas:

                SubscribeToAction<GasAnalysisOptionsSetCalenderTermAction>(
                    action =>
                    {
                        _calenderTerm = action.CalendarTerm;
                        SetHistoricalAnalyses();
                        SetForecastAnalyses();
                    });
                SubscribeToAction<GasAnalysisOptionsUseHistoricalForecastAction>(
                    action =>
                    {
                        _useHistoricalForcast = action.UseHistoricalForecast;
                        SetForecastAnalyses();
                    });
                break;
            default:
                throw new ArgumentOutOfRangeException();

        }
        SubscribeToAction<NotifyHeatingForecastUpdatedAction>(action =>
            {
                _degreeDifference = action.DegreeDifference;
                SetForecastAnalyses();
            });



        SetForecastAnalyses();

        _ready = true;

    }


    void SetHistoricalAnalyses()
    {
        _thisDurationAnalysis = HistoricalDataAnalyzer.GetCurrentDurationAnalysis(MeterType, _calenderTerm);
        _previousDurationAnalysis = HistoricalDataAnalyzer.GetPreviousDurationAnalysis(MeterType, _calenderTerm);
    }

    void SetForecastAnalyses()
    {
        _currentTermForecastAnalysis = TempForecastAnalyzer.GetCurrentPeriodForecastTotals(MeterType, _calenderTerm, _useHistoricalForcast);
        _nextTermForecastAnalysis = TempForecastAnalyzer.GetNextPeriodForecastTotals(MeterType, _calenderTerm, _useHistoricalForcast);
    }

}