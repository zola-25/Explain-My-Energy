@using Energy.App.Standalone.Features.Analysis.Services.Analysis.Interfaces;
@using Energy.App.Standalone.Features.Analysis.Services.DataLoading.Interfaces;
@using Energy.App.Standalone.Features.Analysis.Services.DataLoading.Models;
@using Energy.App.Standalone.Features.EnergyReadings.Store;
@using System.Collections.Immutable;
@using Energy.App.Standalone.Features.Setup.Store.ImmutatableStateObjects;
@implements IDisposable
@inherits FluxorComponent
@inject IDispatcher Dispatcher

@if (_ready)
{

    // Co2?y
    // Tooltips/badges?
    // Button to switch chart to cost/kwh
    <MudItem xs="12" sm="6" md="4">
        <HistoricalAnalysisCard PrimaryHeatSource="true"
                            Term="_calendarTerm"
                            MeterType="MeterType"
                            Period="RelativePeriod.Previous"
                            DurationAnalysis="_previousDurationAnalysis">
        </HistoricalAnalysisCard>
    </MudItem>
    <MudItem xs="12" sm="6" md="4">
        <CurrentPeriodAnalysisCard PrimaryHeatSource="true"
                               Term="_calendarTerm"
                               MeterType="MeterType"
                               TotalsForecast="_currentTermForecastAnalysis"
                               TotalsSoFar="_thisDurationAnalysis">
        </CurrentPeriodAnalysisCard>
    </MudItem>
    <MudItem xs="12" sm="6" md="4">
        <ForecastCard PrimaryHeatSource="true"
            Term="_calendarTerm"
                      ForecastAnalysis="_nextTermForecastAnalysis"
                      MeterType="MeterType">
        </ForecastCard>
    </MudItem>

}

@code {

    [Parameter, EditorRequired]
    public MeterType MeterType { get; set; }

    [Inject] IState<AnalysisOptionsState> AnalysisOptionsState { get; set; }
    [Inject] IState<GasReadingsState> GasReadingsState { get; set; }
    [Inject] IState<ElectricityReadingsState> ElectricityReadingsState { get; set; }
    
    [Inject] IState<GasTariffsState> GasTariffsState { get; set; }
    [Inject] IState<ElectricityTariffsState> ElectricityTariffsState { get; set; }
    
    [Inject] IState<WeatherState> WeatherState { get; set; }
    [Inject] IState<LinearCoefficientsState> LinearCoefficientsState { get; set; }




    [Inject]
    ITempForecastAnalyzer TempForecastAnalyzer { get; set; }

    [Inject]
    IHistoricalDurationAnalyzer HistoricalDataAnalyzer { get; set; }

    [Inject]
    ICostCalculator CostCalculator { get; set; }


    CalendarTerm _calendarTerm => AnalysisOptionsState.Value[MeterType].CalendarTerm;
    
    decimal _degreeDifference => AnalysisOptionsState.Value[MeterType].DegreeDifference;
    LinearCoefficientsState _linearCoefficientsState => LinearCoefficientsState.Value;
    ImmutableList<DailyWeatherReading> _dailyWeatherReadings => WeatherState.Value.WeatherReadings;


    ImmutableList<BasicReading> _basicReadings => MeterType == MeterType.Gas
        ? GasReadingsState.Value.BasicReadings : ElectricityReadingsState.Value.BasicReadings;

    ImmutableList<TariffDetailState> _tariffDefails => MeterType == MeterType.Gas
    ? GasTariffsState.Value.TariffDetails : ElectricityTariffsState.Value.TariffDetails;


    ImmutableList<CostedReading> _historicalCostedReadings => CostCalculator.GetCostReadings(_basicReadings, _tariffDefails).ToImmutableList();


    bool _ready = true;


    HistoricalAnalysis _thisDurationAnalysis => HistoricalDataAnalyzer.GetCurrentDurationAnalysis(MeterType, _calendarTerm, _historicalCostedReadings, WeatherState.Value.WeatherReadings);
    HistoricalAnalysis _previousDurationAnalysis => HistoricalDataAnalyzer.GetPreviousDurationAnalysis(MeterType, _calendarTerm, _historicalCostedReadings, WeatherState.Value.WeatherReadings);

    ForecastAnalysis _currentTermForecastAnalysis => TempForecastAnalyzer.GetCurrentPeriodForecastTotals(MeterType, _calendarTerm, _degreeDifference, _linearCoefficientsState, _tariffDefails, _dailyWeatherReadings);
    ForecastAnalysis _nextTermForecastAnalysis => TempForecastAnalyzer.GetNextPeriodForecastTotals(MeterType, _calendarTerm, _degreeDifference, _linearCoefficientsState, _tariffDefails, _dailyWeatherReadings);


}