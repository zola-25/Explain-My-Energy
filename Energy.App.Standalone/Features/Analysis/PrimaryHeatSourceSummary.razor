@inherits FluxorComponent
@inject IDispatcher Dispatcher

@if (!Ready)
{
    <MudItem xs="12" sm="6" md="4">
        <MudText Typo="Typo.h5">@Status</MudText>
        <MudProgressCircular Stroke="7" Size="@Size.Large" Value="Progress" Color="Color.Primary">
        </MudProgressCircular>
    </MudItem>
}
else
{
    <MudItem xs="12" sm="6" md="4">
        <HistoricalAnalysisCard PrimaryHeatSource="true"
                                Term="_calenderTerm"
                                MeterType="MeterType"
                                DurationAnalysis="_previousDurationAnalysis">
        </HistoricalAnalysisCard>
    </MudItem>
    <MudItem xs="12" sm="6" md="4">
        <CurrentPeriodAnalysisCard PrimaryHeatSource="true"
                                   Term="_calenderTerm"
                                   MeterType="MeterType"
                                   CurrentPeriodForecastAnalysis="_currentTermForecastAnalysis"
                                   CurrentPeriodAnalysisToDate="_thisDurationAnalysis">
        </CurrentPeriodAnalysisCard>
    </MudItem>
    <MudItem xs="12" sm="6" md="4">
        <ForecastCard PrimaryHeatSource="true"
                      Term="_calenderTerm"
                      ForecastAnalysis="_nextTermForecastAnalysis"
                      MeterType="MeterType">
        </ForecastCard>
    </MudItem>
}

@code {

    [Parameter, EditorRequired]
    public MeterType MeterType { get; set; }

    [Inject]
    public IState<AnalysisOptionsState> AnalysisOptionsState { get; set; }

    [Inject]
    ITempForecastAnalyzer TempForecastAnalyzer { get; set; }

    [Inject]
    IHistoricalDurationAnalyzer HistoricalDataAnalyzer { get; set; }



    CalendarTerm _calenderTerm;
    decimal _degreeDifference;
    bool _useHistoricalForcast;

    public string Status { get; set; }
    public bool Ready { get; set; }
    public double Progress { get; set; }

    HistoricalAnalysis _thisDurationAnalysis;
    HistoricalAnalysis _previousDurationAnalysis;

    ForecastAnalysis _currentTermForecastAnalysis;
    ForecastAnalysis _nextTermForecastAnalysis;


    [Inject]
    IState<ElectricityReadingsState> ElectricityReadingsState { get; set; }

    [Inject]
    IState<GasReadingsState> GasReadingsState { get; set; }



    protected override async Task OnParametersSetAsync()
    {
        var initialMeterAnalysisOptions = AnalysisOptionsState.Value[MeterType];

        Ready = false;

        await Task.Delay(1);
        Progress = 30;
        Status = "Analysing Historical";

        _calenderTerm = initialMeterAnalysisOptions.CalendarTerm;
        _degreeDifference = initialMeterAnalysisOptions.DegreeDifference;
        _useHistoricalForcast = initialMeterAnalysisOptions.UseHistoricalForecast;

        await Task.Delay(1);

        SetHistoricalAnalyses();

        Progress = 60;

        Status = "Analysing Forecast";

        await Task.Delay(1);


        Progress = 80;

        switch (MeterType)
        {
            case MeterType.Electricity:

                SubscribeToAction<ElectricityAnalysisOptionsSetCalenderTermAction>(
                    action =>
                    {
                        _calenderTerm = action.CalendarTerm;
                        SetHistoricalAnalyses();
                        SetForecastAnalyses();
                    });
                SubscribeToAction<ElectricityAnalysisOptionsUseHistoricalForecastAction>(
                    action =>
                    {
                        _useHistoricalForcast = action.UseHistoricalForecast;
                        SetForecastAnalyses();
                    });
                break;
            case MeterType.Gas:

                SubscribeToAction<GasAnalysisOptionsSetCalenderTermAction>(
                    action =>
                    {
                        _calenderTerm = action.CalendarTerm;
                        SetHistoricalAnalyses();
                        SetForecastAnalyses();
                    });
                SubscribeToAction<GasAnalysisOptionsUseHistoricalForecastAction>(
                    action =>
                    {
                        _useHistoricalForcast = action.UseHistoricalForecast;
                        SetForecastAnalyses();
                    });
                break;
            default:
                throw new ArgumentOutOfRangeException();

        }
        SubscribeToAction<NotifyHeatingForecastReadyAction>(action =>
            {
                _degreeDifference = action.DegreeDifference;
                SetForecastAnalyses();
            });


        await Task.Delay(1);

        SetForecastAnalyses();

        Ready = true;
    }

    void SetHistoricalAnalyses()
    {
        _thisDurationAnalysis = HistoricalDataAnalyzer.GetCurrentDurationAnalysis(MeterType, _calenderTerm);
        _previousDurationAnalysis = HistoricalDataAnalyzer.GetPreviousDurationAnalysis(MeterType, _calenderTerm);
    }

    void SetForecastAnalyses()
    {
        _currentTermForecastAnalysis = TempForecastAnalyzer.GetCurrentPeriodForecastTotals(MeterType, _calenderTerm, _useHistoricalForcast);
        _nextTermForecastAnalysis = TempForecastAnalyzer.GetNextPeriodForecastTotals(MeterType, _calenderTerm, _useHistoricalForcast);
    }

}