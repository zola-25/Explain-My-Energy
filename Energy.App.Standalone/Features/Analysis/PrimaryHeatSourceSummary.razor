@using Energy.App.Standalone.Features.Analysis.Services.Analysis.Interfaces;
@using Energy.App.Standalone.Features.Analysis.Services.DataLoading.Interfaces;
@using Energy.App.Standalone.Features.Analysis.Services.DataLoading.Models;
@using Energy.App.Standalone.Features.EnergyReadings.Store;
@using System.Collections.Immutable;
@using Energy.App.Standalone.Features.Setup.Store.ImmutatableStateObjects;
@inherits FluxorComponent
@inject IDispatcher Dispatcher

@if (!Ready)
{
    <MudItem xs="12" sm="6" md="4">
        <MudText Typo="Typo.h5">@Status</MudText>
        <MudProgressCircular Stroke="7" Size="@Size.Large" Value="Progress" Color="Color.Primary">
        </MudProgressCircular>
    </MudItem>
}
else
{
    <MudItem xs="12" sm="6" md="4">
        <HistoricalAnalysisCard PrimaryHeatSource="true"
                                Term="_meterAnalysisOptions.CalendarTerm"
                                MeterType="MeterType"
                                Period="RelativePeriod.Previous"
                                DurationAnalysis="_previousDurationAnalysis">
        </HistoricalAnalysisCard>
    </MudItem>
    <MudItem xs="12" sm="6" md="4">
        <CurrentPeriodAnalysisCard PrimaryHeatSource="true"
                                   Term="_meterAnalysisOptions.CalendarTerm"
                                   MeterType="MeterType"
                                   TotalsForecast="_currentTermForecastAnalysis"
                                   TotalsSoFar="_thisDurationAnalysis">
        </CurrentPeriodAnalysisCard>
    </MudItem>
    <MudItem xs="12" sm="6" md="4">
        <ForecastCard PrimaryHeatSource="true"
                      Term="_meterAnalysisOptions.CalendarTerm"
                      ForecastAnalysis="_nextTermForecastAnalysis"
                      MeterType="MeterType">
        </ForecastCard>
    </MudItem>

}

@code {

    [Parameter, EditorRequired]
    public MeterType MeterType { get; set; }

    [Inject] public IState<AnalysisOptionsState> AnalysisOptionsState { get; set; }

    [Inject]
    ITempForecastAnalyzer TempForecastAnalyzer { get; set; }

    [Inject]
    IHistoricalDurationAnalyzer HistoricalDataAnalyzer { get; set; }


    MeterAnalysisOptions _meterAnalysisOptions => AnalysisOptionsState.Value[MeterType];


    public string Status { get; set; }
    public bool Ready { get; set; }
    public double Progress { get; set; }

    HistoricalAnalysis _thisDurationAnalysis;
    HistoricalAnalysis _previousDurationAnalysis;

    ForecastAnalysis _currentTermForecastAnalysis;
    ForecastAnalysis _nextTermForecastAnalysis;

    AnalysisOptionsActionFactory _analysisOptionsActionFactory;

    protected override async Task OnParametersSetAsync()
    {
        Ready = false;

        Progress = 30;
        Status = "Analysing Historical";
        _analysisOptionsActionFactory = new AnalysisOptionsActionFactory(MeterType);

        await Task.Run(() =>
        {
            _thisDurationAnalysis = HistoricalDataAnalyzer.GetCurrentDurationAnalysis(MeterType, _meterAnalysisOptions.CalendarTerm);
            _previousDurationAnalysis = HistoricalDataAnalyzer.GetPreviousDurationAnalysis(MeterType, _meterAnalysisOptions.CalendarTerm);
        });
        Progress = 60;

        Status = "Analysing Forecast";

        await Task.Run(() =>
        {
            SetForecastAnalyses(_meterAnalysisOptions.DegreeDifference);
        });

        Progress = 80;

        switch (MeterType)
        {
            case MeterType.Electricity:
                SubscribeToAction<ElectricityAnalysisOptionsSetDegreeDifferenceAction>(c => SetForecastAnalyses(c.DegreeDifference));
                break;
            case MeterType.Gas:
                SubscribeToAction<GasAnalysisOptionsSetDegreeDifferenceAction>(c => SetForecastAnalyses(c.DegreeDifference));
                break;
            default:
                throw new ArgumentOutOfRangeException();

        }

        Ready = true;
    }

    void SetForecastAnalyses(decimal degreeDifference)
    {
        _currentTermForecastAnalysis = TempForecastAnalyzer.GetCurrentPeriodForecastTotals(MeterType, _meterAnalysisOptions.CalendarTerm, degreeDifference);
        _nextTermForecastAnalysis = TempForecastAnalyzer.GetNextPeriodForecastTotals(MeterType, _meterAnalysisOptions.CalendarTerm, degreeDifference);
    }
}