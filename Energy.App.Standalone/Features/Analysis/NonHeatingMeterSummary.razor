@inherits FluxorComponent
@inject IDispatcher Dispatcher
@if (_ready)
{
    <MudItem xs="12" sm="6" md="4">
        <HistoricalAnalysisCard PrimaryHeatSource="false"
                                Term="_calendarTerm"
                                MeterType="MeterType"
                                DurationAnalysis="_previousDurationAnalysis">
        </HistoricalAnalysisCard>
    </MudItem>
    <MudItem xs="12" sm="6" md="4">
        <CurrentPeriodAnalysisCard PrimaryHeatSource="false"
                                   Term="_calendarTerm"
                                   MeterType="MeterType"
                                   CurrentPeriodForecastAnalysis="_currentTermForecastAnalysis"
                                   CurrentPeriodAnalysisToDate="_thisDurationAnalysis">
        </CurrentPeriodAnalysisCard>
    </MudItem>
    <MudItem xs="12" sm="6" md="4">
        <ForecastCard PrimaryHeatSource="false"
                      Term="_calendarTerm"
                      ForecastAnalysis="_nextTermForecastAnalysis"
                      MeterType="MeterType">
        </ForecastCard>
    </MudItem>

}

@code {

    [Parameter, EditorRequired]
    public MeterType MeterType { get; set; }


    [Inject]
    public IState<AnalysisOptionsState> AnalysisOptionsState { get; set; }


    [Inject]
    IHistoricalForecastSummarizer SimpleForecastAnalyzer { get; set; }

    [Inject]
    IHistoricalConsumptionSummarizer HistoricalDataAnalyzer { get; set; }

    CalendarTerm _calendarTerm;
    bool _ready;

    HistoricalAnalysis _thisDurationAnalysis;
    HistoricalAnalysis _previousDurationAnalysis;

    ForecastAnalysis _currentTermForecastAnalysis;
    ForecastAnalysis _nextTermForecastAnalysis;

    protected override void OnParametersSet()
    {
        _ready = false;

        var initialMeterAnalysisOptions = AnalysisOptionsState.Value[MeterType];


        _calendarTerm = initialMeterAnalysisOptions.CalendarTerm;

        SetHistoricalAnalyses();


        switch (MeterType)
        {
            case MeterType.Electricity:

                SubscribeToAction<ElectricityAnalysisOptionsSetCalenderTermAction>(
                    action =>
                    {
                        _calendarTerm = action.CalendarTerm;
                        SetHistoricalAnalyses();
                        SetForecastAnalyses();
                    });
                break;
            case MeterType.Gas:

                SubscribeToAction<GasAnalysisOptionsSetCalenderTermAction>(
                    action =>
                    {
                        _calendarTerm = action.CalendarTerm;
                        SetHistoricalAnalyses();
                        SetForecastAnalyses();
                    });
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }


        SetForecastAnalyses();

        _ready = true;
    }



    void SetHistoricalAnalyses()
    {
        _thisDurationAnalysis = HistoricalDataAnalyzer.GetCurrentDurationAnalysis(MeterType, _calendarTerm);
        _previousDurationAnalysis = HistoricalDataAnalyzer.GetPreviousDurationAnalysis(MeterType, _calendarTerm);
    }

    void SetForecastAnalyses()
    {
        _currentTermForecastAnalysis = SimpleForecastAnalyzer.GetCurrentPeriodForecastTotals(MeterType, _calendarTerm);
        _nextTermForecastAnalysis = SimpleForecastAnalyzer.GetNextPeriodForecastTotals(MeterType, _calendarTerm);
    }

}