@page "/Setup"
@using Blazored.LocalStorage;
@inject AppStatus AppConfig
@inject IState<UserLockState> UserLockState
@inject IState<HouseholdState> HouseholdState
@inherits FluxorComponent


<ExtendedPageTitle>App Setup</ExtendedPageTitle>

@{
    bool disableInputs = AppConfig.IsDemoMode || UserLockState.Value.LockingOrLocked;
    bool householdSetup = HouseholdState.Value.Saved && !HouseholdState.Value.Invalid;
}

<MudGrid Justify="Justify.Center" Class="mb-15">
    <MudItem xs="12">

        <div class="d-flex justify-space-between align-baseline mt-2">
            <div class="d-flex flex-wrap justify-center">
                <MudButton Class="ma-0" ButtonType="ButtonType.Button" Disabled="@(AppConfig.IsDemoMode || !householdSetup || UserLockState.Value.LockingOrUnlocking)"
                           Size="Size.Small" Variant="Variant.Filled"
                           OnClick="OpenLockOrUnlockDialog"
                           Color="Color.Secondary"
                           title="@(UserLockState.Value.SetupDataLocked ? "Unlock Data" : "Lock Data")">

                    @if (UserLockState.Value.LockingOrLocked)
                    {
                        <span><i class="fa-solid fa-lock-closed"></i> Unlock Data</span>
                    }
                    else
                    {
                        <span><i class="fa-solid fa-lock"></i> Lock Data</span>
                    }
                </MudButton>
                <DocTooltipIcon DocSnippetHeader="Encrypt Setup Data"
                                DocSnippetType="DocSnippetType.ManualActionsWipeAllData"
                                IconTitle="Help for password protecting your Setup Data" />
                <LockStorageDialog @bind-Open="_showLockStorageDialog" />
                <UnlockStorageDialog @bind-Open="_showUnlockStorageDialog" />
            </div>

            <div class="d-flex flex-wrap justify-center">
                <MudButton Class="ma-0" ButtonType="ButtonType.Button" Disabled="@disableInputs" Size="Size.Small"
                           Variant="Variant.Filled" OnClick="WipeAllAsync" Color="Color.Error"
                           EndIcon="@Icons.Material.Filled.DeleteForever" title="Wipe all data?">
                    Wipe All Data
                </MudButton>
                <DocTooltipIcon DocSnippetHeader="Wipe All Data"
                                DocSnippetType="DocSnippetType.ManualActionsWipeAllData"
                                IconTitle="Help for Wiping All User Data" />
            </div>
        </div>

    </MudItem>
    <MudItem xs="12">
        <MudPaper Elevation="2" Class="p-2">

            <Household></Household>

        </MudPaper>
    </MudItem>
    <MudItem xs="12">
        <MudPaper Elevation="2" Class="p-2">
            <MeterSetupTable></MeterSetupTable>
        </MudPaper>
    </MudItem>

    <MudItem xs="12">
        <MudPaper Elevation="2" Class="p-2">
            <WeatherDataInfo></WeatherDataInfo>
        </MudPaper>
    </MudItem>
</MudGrid>

<MudMessageBox @ref="WipeAllDataBox" Title="Delete Everything" CancelText="Cancel">
    <MessageContent>
        <MudText Typo="Typo.body2">
            <strong>This will remove all user associated data stored in the browser for this site.</strong>
            <br />
            <strong>It will reset the application and return the user to the initial welcome screen.</strong>
            <br />
            <strong>This <em>cannot</em> be undone</strong>
            <br />
        </MudText>
    </MessageContent>
    <YesButton>
        <MudButton Variant="Variant.Filled" Class="mx-auto" Color="Color.Error" Size="Size.Small">Delete</MudButton>
    </YesButton>
    <CancelButton>
        <MudButton Variant="Variant.Filled" Class="mx-auto" Color="Color.Default" Size="Size.Small">Cancel</MudButton>
    </CancelButton>
</MudMessageBox>

<MudPopover Open="@_showWipeError" Fixed="true" Class="px-4 pt-4">
    <div class="d-flex flex-column">
        <MudText>Error wiping all user data</MudText>
        <MudButton OnClick="@ToggleErrorPopover" Class="ml-auto mb-1" Color="Color.Error">Close</MudButton>
    </div>
</MudPopover>


@code {
    [Inject]
    ILocalStorageService LocalStorageService { get; set; }

    [Inject]
    NavigationManager NavigationManager { get; set; }

    [Inject]
    ILogger<SetupPage> Logger { get; set; }

    private MudMessageBox WipeAllDataBox { get; set; }

    private void OpenLockOrUnlockDialog()
    {
        if (UserLockState.Value.SetupDataLocked)
        {
            _showUnlockStorageDialog = true;
        }
        else
        {
            _showLockStorageDialog = true;
        }
    }

    public void ToggleErrorPopover()
    {
        _showWipeError = !_showWipeError;
    }
    private bool _showWipeError = false;
    private bool _showLockStorageDialog = false;
    private bool _showUnlockStorageDialog = false;

    private async void WipeAllAsync()
    {
        try
        {
            bool? result = await WipeAllDataBox.Show();
            if (result == null || result == false)
            {
                return;
            }
            await LocalStorageService.ClearAsync();
            NavigationManager.NavigateTo("/", new NavigationOptions()
                {
                    ForceLoad = true,
                    ReplaceHistoryEntry = true
                });
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Exception while wiping all data");
            _showWipeError = true;
        }
    }
}