

@inherits FluxorComponent
@inject IState<WeatherState> WeatherState
@inject IState<HouseholdState> HouseholdState
@inject IDispatcher Dispatcher

<MudText Align="Align.Left" Typo="Typo.h5" Class="m-3 fw-bolder">Weather Data Status</MudText>
<MudTable Items="Enumerable.Range(0, 1)" T="int" Elevation="0" >
    <HeaderContent>
        <MudTh Class="fw-bold">Historical Data</MudTh>
        <MudTh Class="fw-bold">Latest Reading</MudTh>
        <MudTh Class="fw-bold">Short-term Forecast Range</MudTh>
        <MudTh Class="fw-bold">Long-term Climate Forecast Range</MudTh>
    </HeaderContent>
    <RowTemplate>
        @if (!HouseholdState.Value.Saved)
        {
            <MudTd colspan="4">Complete Household setup to import local weather data</MudTd>
        }
        else if (WeatherState.Value.Loading)
        {
            <MudTd colspan="4">Loading Weather Data...</MudTd>
        }
        else if (WeatherState.Value.WeatherReadings.Any())
        {
            <MudTd DataLabel="Historical">From @WeatherState.Value.WeatherReadings.First().UtcTime.eToString("dnn MMM yyyy", true)</MudTd>
            <MudTd DataLabel="Latest">
                @{
                    var latestReading = WeatherState.Value.WeatherReadings.Where(c => c.IsRecentForecast).
                        OrderBy(c => c.UtcTime).
                        Last().
                        UtcTime;
                }

                @if (latestReading >= DateTime.UtcNow.Date.AddDays(-1))
                {
                    <MudTooltip Text="Up to date">
                        @latestReading.eToString("ddd dnn MMM yy", true)
                        <MudIcon Icon="@Icons.Material.Filled.Check" Color="Color.Success"></MudIcon>
                    </MudTooltip>
                }
                else
                {
                    <MudTooltip Text="Missing Latest Weather Data">
                        @latestReading.eToString("ddd dnn MMM yy", true)
                        <MudIcon Icon="@Icons.Material.Filled.AccessTime" Color="Color.Default"></MudIcon>
                    </MudTooltip>
                }
            </MudTd>
            <MudTd DataLabel="Short-term">
                @{
                    var forecastReadings = WeatherState.Value.WeatherReadings.Where(c => c.IsNearForecast).
                        OrderBy(c => c.UtcTime).
                        ToList();
                }
                @forecastReadings.First().UtcTime.eDateToMinimal() - @forecastReadings.Last().UtcTime.eDateToMinimal()
            </MudTd>
            <MudTd DataLabel="Long-term">
                @{
                    var climateReadings = WeatherState.Value.WeatherReadings.Where(c => c.IsClimateForecast).
                        OrderBy(c => c.UtcTime).
                        ToList();
                }
                @climateReadings.First().UtcTime.eDateToMinimal() - @climateReadings.Last().UtcTime.eDateToMinimal()

            </MudTd>
        }
    </RowTemplate>
</MudTable>


@code {

    protected override void OnInitialized()
    {
        base.OnInitialized();

        SubscribeToAction<NotifyHouseholdUpdatedAction>(LoadWeatherData);
    }

    private async void LoadWeatherData(NotifyHouseholdUpdatedAction _)
    {
        if (HouseholdState.Value.Saved 
            && HouseholdState.Value.OutCodeCharacters != WeatherState.Value.OutCodeCharacters)
        {
            Dispatcher.Dispatch(new EnsureWeatherLoadedAction(true));
        }
    }


}