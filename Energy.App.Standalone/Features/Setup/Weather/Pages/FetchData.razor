@page "/fetchdata"
@inherits FluxorComponent
@using Energy.Shared
@using Energy.App.Standalone.Features.Setup.Weather.Store
@inject IDispatcher Dispatcher
@inject IState<WeatherState> WeatherState


<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>


<button class="btn btn-primary" @onclick="LoadWeatherData">Load Data</button>
<input type="text" placeholder="Postal Area" @bind-value="@Outcode" />

@if (WeatherState.Value.Loading)
{
    <p><em>Loading...</em></p>
}
else if (!WeatherState.Value.WeatherReadings.Any())
{
    <p><em>No weather readings loaded</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp Min</th>
                <th>Temp Max</th>
                <th>Temp Avg</th>

                <th>Historical?</th>
                <th>Recent Forecast?</th>
                <th>Near Term Forecast?</th>
                <th>Climate Forecast?</th>
                <th>Weather code</th>

            </tr>
        </thead>
        <tbody>
            @foreach (var weatherReading in WeatherState.Value.WeatherReadings)
            {
                <tr>
                    <td>@weatherReading.UtcTime.ToShortDateString()</td>
                    <td>@weatherReading.TemperatureAverage</td>
                    <td>@weatherReading.TemperatureMin</td>
                    <td>@weatherReading.TemperatureMax</td>
                    <td>@((weatherReading.TemperatureMin + weatherReading.TemperatureMax)/2m)</td>

                    <td>@weatherReading.IsHistorical</td>
                    <td>@weatherReading.IsRecentForecast</td>
                    <td>@weatherReading.IsNearForecast</td>
                    <td>@weatherReading.IsClimateForecast</td>
                    <td>@weatherReading.Icon</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private async Task LoadWeatherData()
    {
        var completion = new TaskCompletionSource<int>();
        Dispatcher.Dispatch(new EnsureWeatherLoadedAction(false, completion));
        await completion.Task;
    }

    public string Outcode { get; set; }

}
