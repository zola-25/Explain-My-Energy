@inherits FluxorComponent
@inject IDispatcher Dispatcher
@inject IState<UserLockState> UserLockState
@inject AppStatus AppConfig

@if (_readyToInteract)
{
    bool disableInputs = AppConfig.IsDemoMode || UserLockState.Value.LockingOrLocked;

    <EditForm Model="@_householdDetails" OnValidSubmit="HandleValidSubmit">

        <MudCard Elevation="0">
            <MudCardHeader>
                <MudText Class="fw-bolder" Typo="Typo.h5">Household Setup</MudText>
            </MudCardHeader>
            <MudCardContent>
                <ObjectGraphDataAnnotationsValidator />
                <ValidationSummary />
                <div class="my-3 d-flex align-baseline">
                    <MudDatePicker @bind-Date="@_householdDetails.MoveInDate" For="@(() => _householdDetails.MoveInDate)" Required
                                    Placeholder="Select Move-in Date"
                                    FixDay="1"
                                    @bind-Date:after="@(() => { _openTo = OpenTo.Month; })"
                                    Disabled="@disableInputs"
                                    OpenTo="@_openTo"
                                    Label="Move-in Date"
                                    AnchorOrigin="Origin.CenterRight"
                                    TransformOrigin="Origin.CenterRight"
                                    ReadOnly="@_submitting"
                                    Clearable="true"
                                    DisableToolbar="@_disableToolbar"
                                    DateFormat="MMMM yyyy"
                                    MaxDate="DateTime.Today"></MudDatePicker>
                     <DocTooltipIcon DocSnippetHeader="Move-in Date" DocSnippetType="DocSnippetType.HouseholdMoveInDate" IconTitle="Help for Move-in Date" />

                 </div>

                 <div class="my-3 d-flex align-baseline">
                     <MudTextField For="@(() => _householdDetails.IhdMacId)"
                                   ReadOnly="@_submitting"
                                   Converter="@uppercaseConverter"
                                   T="string"
                                   Label="IHD MAC ID"
                                   @bind-Value="@_householdDetails.IhdMacId" Required Disabled="@(disableInputs)"
                                   Placeholder="IHD MAC ID"></MudTextField>
                     <DocTooltipIcon DocSnippetHeader="In-Home Device MAC ID" DocSnippetType="DocSnippetType.HouseholdIHD" IconTitle="Help for IHD MAC ID" />

                 </div>
                 <div class="my-3 d-flex align-baseline">
                     <MudAutocomplete @bind-Value="_householdDetails.OutCode"
                                      For="@(() => _householdDetails.OutCode)"
                                      T="OutCode" CoerceText="true"
                                      ReadOnly="@_submitting"
                                      Label="Postal Area"
                                      MaxLength="5"
                                      Clearable="true"
                                      Placeholder="Postal Area"
                                      Culture="@System.Globalization.CultureInfo.InvariantCulture"
                                              Required
                                      HelperText="Enter the first two characters and select from the dropdown"
                                      HelperTextOnFocus="true"
                                      Disabled="@(disableInputs)"
                                      UserAttributes="@(new(){{"autocomplete", "off"}})"
                                      ShowProgressIndicator="true" ToStringFunc="@(outCode => outCode.OutCodeCharacters)"
                                      MinCharacters="2"
                                      OnClearButtonClick="ClearPostalArea"
                                      SearchFuncWithCancel="SearchOutCodes"></MudAutocomplete>
                     <DocTooltipIcon DocSnippetHeader="Postal Area" DocSnippetType="DocSnippetType.HouseholdPostalArea" IconTitle="Help for Postal Area" />
                 </div>
                 <div class="d-flex align-baseline justify-center">
                     <MudText>What is your home's primary heating source?</MudText>
                     <DocTooltipIcon DocSnippetHeader="Primary Heating Source" DocSnippetType="DocSnippetType.HouseholdPrimaryHeatingSource" IconTitle="Help for selecting your home's primary heating source" />
                 </div>
                 <div class="d-flex align-baseline justify-center">
                     <MudRadioGroup Name="Primary Heat Source" T="MeterType" For="@(() => _householdDetails.PrimaryHeatSource)"
                                    Disabled="@disableInputs" Required @bind-SelectedOption="@_householdDetails.PrimaryHeatSource" ReadOnly="@_submitting">
                         <MudRadio T="MeterType" Option="MeterType.Gas">Gas</MudRadio>
                         <MudRadio T="MeterType" Option="MeterType.Electricity">Electricity</MudRadio>
                     </MudRadioGroup>
                 </div>
             </MudCardContent>
             <MudCardActions Class="d-flex flex-column align-start ">
                 <MudButton Class="mx-auto" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Size="Size.Medium" Disabled="@(disableInputs || _submitting)" Color="Color.Primary">@_saveButtonText</MudButton>

                    <MudText Class="mx-auto mt-3 fw-bold" Color="Color.Default" hidden="@(!_submitting)">
                        Saving
                    </MudText>
                    <MudText Class="mx-auto mt-3 fw-bold" Color="Color.Success" hidden="@(!_submitSuccessful)">
                        <i class="fa-solid fa-check" aria-hidden="true"></i> @_saveResponseMessage
                </MudText>
                <MudText Class="mx-auto mt-3 fw-bold" Color="@_weatherLoadingColor" hidden="@(!_loadingWeatherData)">
                    <i class="fa-solid fa-temperature-half" aria-hidden="true"></i> @weatherDataLoadMessage
                </MudText>

            </MudCardActions>
        </MudCard>
    </EditForm>
}
@code {

    [Inject] IState<HouseholdState> HouseholdState { get; set; }
    [Inject] IJSRuntime JS { get; set; }

    private IJSObjectReference module;

    HouseholdDetails _householdDetails = new();

    Converter<string> uppercaseConverter = new Converter<string>
        {
            SetFunc = value => value?.ToUpperInvariant(),
            GetFunc = text => (text ?? "").ToUpperInvariant(),
        };

    string _saveResponseMessage = string.Empty;
    bool _submitting;
    bool _submitSuccessful;
    bool _loadingWeatherData;
    bool _loadingWeatherDataSuccess;
    string weatherDataLoadMessage = string.Empty;

    Color _weatherLoadingColor = Color.Default;

    bool _readyToInteract;
    string _saveButtonText;

    protected override void OnInitialized()
    {
        base.OnInitialized();


        SetHouseholdInputs();
        SubscribeToAction<NotifyHouseholdSavedSuccess>(ShowSuccessMessage);
        SubscribeToAction<EnsureWeatherLoadedAction>((action) =>
        {
            _loadingWeatherData = true;
            _weatherLoadingColor = Color.Default;
            weatherDataLoadMessage = "Loading Weather Data..";

        });
        SubscribeToAction<NotifyWeatherLoadingFinished>((action) =>
        {
            if (action.Success)
            {
                _weatherLoadingColor = Color.Info;
                weatherDataLoadMessage = "Weather Data Loaded";
                _loadingWeatherDataSuccess = true;
            }
            else
            {
                _weatherLoadingColor = Color.Warning;
                weatherDataLoadMessage = "Weather Data Failed to Load";
                _loadingWeatherDataSuccess = false;
            }
        });
        SubscribeToAction<SetSetupDataLockedAction>((action) =>
        {
            SetHouseholdInputs();
        });
        SubscribeToAction<SetSetupDataUnlockedAction>((action) =>
        {
            SetHouseholdInputs();
        });
        _readyToInteract = true;
    }

    OpenTo _openTo = OpenTo.Year;


    private HouseholdDetails GetHouseholdDetails()
    {
        return new HouseholdDetails()
            {
                IhdMacId = UserLockState.Value.LockingOrLocked ? "Locked" : HouseholdState.Value.IhdMacId,
                MoveInDate = UserLockState.Value.LockingOrLocked ? new DateTime(1900, 1, 1) : HouseholdState.Value.MoveInDate,
                OutCode = UserLockState.Value.LockingOrLocked ? new OutCode() { OutCodeCharacters = "Locked" } : new OutCode() { OutCodeCharacters = HouseholdState.Value.OutCodeCharacters },
                PrimaryHeatSource = HouseholdState.Value.PrimaryHeatSource
            };
    }
    private void SetHouseholdInputs()
    {
        _openTo = HouseholdState.Value.MoveInDate is null ? OpenTo.Year : OpenTo.Month;

        _householdDetails = GetHouseholdDetails();
        _saveButtonText = HouseholdState.Value.Saved ? "Update" : "Save";
    }

    BrowserDimension _browserDimension;
    bool _disableToolbar = false;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import",
                "./Features/Setup/Household/Household.razor.js");
            _browserDimension = await module.InvokeAsync<BrowserDimension>("getBrowserDimensions");

            if (_browserDimension.Height < 500)
            {
                _disableToolbar = true;
                StateHasChanged();
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }


    private void ShowSuccessMessage(NotifyHouseholdSavedSuccess _)
    {
        _submitting = false;
        _submitSuccessful = true;
        _saveResponseMessage = "Household Details Saved";
    }


    private class BrowserDimension
    {
        public int Width { get; set; }
        public int Height { get; set; }
    }

    private async void HandleValidSubmit()
    {
        _submitting = true;
        _submitSuccessful = false;
        _saveResponseMessage = string.Empty;
        _loadingWeatherData = false;
        _loadingWeatherDataSuccess = false;

        await Task.Delay(TimeSpan.FromSeconds(2));

        Dispatcher.Dispatch(new HouseholdSubmitSuccessAction(
            _householdDetails.MoveInDate,
            _householdDetails.IhdMacId,
            _householdDetails.OutCode.OutCodeCharacters, _householdDetails.PrimaryHeatSource));

    }

    private async Task<IEnumerable<OutCode>> SearchOutCodes(string inputString, CancellationToken ctx)
    {
        return await OutCodeLookup.SearchOutCodes(inputString, ctx);
    }

    private void ClearPostalArea()
    {
        _householdDetails.OutCode = null;
    }

    public async ValueTask DisposeAsync()
    {
        if (module is not null)
        {
            await module.DisposeAsync();
        }
    }
}
