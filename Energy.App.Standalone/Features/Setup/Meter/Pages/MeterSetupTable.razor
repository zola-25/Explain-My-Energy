@inherits FluxorComponent
@inject IState<HouseholdState> HouseholdState
@inject IDispatcher Dispatcher
@inject IState<UserLockState> UserLockState
@inject AppStatus AppConfig

<MudOverlay @bind-Visible="Reloading" DarkBackground="true" ZIndex="9">

    <MudText Typo="Typo.h4">Reloading Energy Readings</MudText>
    <div class="spinner"></div>

</MudOverlay>


@{
    var disableInputs = AppConfig.IsDemoMode || UserLockState.Value.LockingOrLocked;
}

<div class="d-flex flex-wrap justify-space-between align-baseline">
    <MudPaper Class="d-flex ma-3 align-center" Elevation="0">
        <MudText Typo="Typo.h5" Class="fw-bolder">Meter Setup</MudText>
    </MudPaper>
</div>


<MudTable Items="@_meterStatusList.Values" T="MeterStatus" Breakpoint="Breakpoint.Sm" Elevation="0">
    <HeaderContent>
        <MudTh Class="fw-bold">Type</MudTh>
        <MudTh Class="fw-bold">Add / Remove </MudTh>
        <MudTh Class="fw-bold">MPxN</MudTh>
        <MudTh Class="fw-bold">Authorized</MudTh>
        <MudTh Class="fw-bold">Energy Readings</MudTh>
        <MudTh Class="fw-bold">Manual Update Readings</MudTh>
        <MudTh Class="fw-bold">Current Tariff</MudTh>
        <MudTh Class="fw-bold"></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd Class="fw-bold" DataLabel="Type">@context.MeterType</MudTd>
        @{
            bool householdSetupValid = HouseholdState.Value.Saved && !HouseholdState.Value.Invalid;
        }
        @if (!householdSetupValid && context.MeterType == MeterType.Gas)
        {
            <MudTd colspan="7" DataLabel="Complete Household setup">
                <MudText Typo="Typo.body1" Align="Align.Center" Class="fw-bolder">Complete Household setup to add an energy meter</MudText>
            </MudTd>
        }
        else if (!householdSetupValid && context.MeterType == MeterType.Electricity)
        {
            <MudTd colspan="7"></MudTd>
        }
        else
        {

            <MudTd DataLabel="Add / Remove">

            @if (context.Added)
            {
                <div class="d-flex align-center">
                        <MudButton Class="ma-1" Color="Color.Error" Disabled="@(disableInputs)" ButtonType="ButtonType.Button" Variant="Variant.Outlined" Size="Size.Small" @onclick="@(async () => await RemoveMeterAsync(context.MeterType))">Remove</MudButton>
                    <DocTooltipIcon DocSnippetHeader="Remove Meter" DocSnippetType="DocSnippetType.ManualActionsRemoveMeter" IconTitle="Help for Updating or Removing Meters" />
                </div>
            }
            else
            {
                    <MudButton 
                        aria-label="@($"Add {context.MeterType} Meter")" 
                        Href="@(context.MeterType == MeterType.Electricity ? "/AddElectricityMeter" : "/AddGasMeter")"
                               Disabled="@(!HouseholdState.Value.Saved || disableInputs)"
                               Color="Color.Primary" ButtonType="ButtonType.Button" Variant="Variant.Filled" Size="Size.Small">@($"Add {@context.MeterType}")</MudButton>
            }
            </MudTd>
            <MudTd DataLabel="MPxN">@(UserLockState.Value.LockingOrLocked ? "Locked" : context.Mpxn)</MudTd>
        <MudTd DataLabel="Authorized">
            @if (context.Authorized)
            {
                <MudText Color="Color.Success">Authorized</MudText>
            }
            else
            {
                <MudTooltip ShowOnHover="true" Text="Authorize this meter with n3rgy">
                    <MudButton aria-label="@($"Authorize {context.MeterType} Meter")"
                               Href="@($"/MeterAuthorization/{context.MeterType}")"
                                   Color="Color.Default" Disabled="@(!context.Added || disableInputs)"
                               ButtonType="ButtonType.Button"
                               Variant="Variant.Filled"
                               Size="Size.Small">Authorize</MudButton>
                </MudTooltip>
            }
        </MudTd>
        <MudTd DataLabel="Energy Readings">
            @if (context.Authorized)
            {
                if (context.ReadingsLoading)
                {
                    <MudText>Updating...</MudText>
                }
                else if (context.LatestReadingsDate != null)
                {
                    @if (context.LatestReadingsDate.eUpToDate())
                    {
                        <MudText>Up to Date</MudText>
                    }
                    else
                    {
                        <MudText>Most Recent: @context.LatestReadingsDate.Value.eDateToMinimal()</MudText>
                    }
                }
                else
                {
                    <MudText>No Energy Readings Loaded</MudText>
                }

            }
        </MudTd>
        <MudTd DataLabel="Manual Update Readings">
            @if (context.Authorized && !context.ReadingsLoading)
            {
                <div class="d-flex align-center">
                    @if (context.LatestReadingsDate != null)
                    {
                            <MudButton Disabled="context.LatestReadingsDate.eUpToDate() || disableInputs" Class="ma-1" Color="Color.Primary" ButtonType="ButtonType.Button"
                                   Variant="Variant.Outlined" Size="Size.Small" @onclick="@((e) => DispatchUpdateReadings(context.MeterType))">Update</MudButton>
                    }
                        <MudButton Class="ma-1" Disabled="@disableInputs"
                               Color="Color.Error" ButtonType="ButtonType.Button" Variant="Variant.Outlined" Size="Size.Small" @onclick="@(() => DispatchReloadReadings(context.MeterType))">Reload All</MudButton>
                    <DocTooltipIcon DocSnippetHeader="Update or Reload" DocSnippetType="DocSnippetType.ManualActionsUpdateMeterData" IconTitle="Help for Updating or Reloading Readings" />
                </div>
            }

        </MudTd>
        <MudTd DataLabel="Current Tariff">
            @if (context.Added)
            {
                @if (context.HasActiveTariff)
                {
                    <MudText Typo="Typo.body2">@context.TariffUnitRateText</MudText>
                    <MudText Typo="Typo.body2">@context.TariffStandingChargeText</MudText>
                }
                else
                {
                    <MudAlert Severity="Severity.Warning">No active tariff set</MudAlert>
                }
            }
        </MudTd>
        <MudTd DataLabel="Set Tariffs">

            <MudButton aria-label="@($"{context.MeterType} Meter Tariffs")" Href="@($"/Tariffs/{context.MeterType}")"
                       Target="_self"
                       Color="Color.Primary"
                           Disabled="@(!context.Added || disableInputs)"
                       ButtonType="ButtonType.Button"
                       Variant="Variant.Filled"
                       Size="Size.Small">
                <span><i class="fa-solid fa-sterling-sign" aria-hidden="true"></i> Tariffs</span>
            </MudButton>
        </MudTd>
        }
    </RowTemplate>

</MudTable>

<MudMessageBox @ref="DeleteBox" Title="Warning" CancelText="Cancel">
    <MessageContent>
        This will remove the meter with all associated data,<br />
        including Energy Readings and Tariffs
        <br />
        <br />
        <strong>This cannot be undone</strong>
        <br />
        <br />

    </MessageContent>
    <YesButton>
        <MudButton Variant="Variant.Text" Class="ml-2" Color="Color.Error" Size="Size.Small">Delete</MudButton>
    </YesButton>
    <CancelButton>
        <MudButton Variant="Variant.Text" Color="Color.Default" Size="Size.Small">Cancel</MudButton>
    </CancelButton>
</MudMessageBox>





