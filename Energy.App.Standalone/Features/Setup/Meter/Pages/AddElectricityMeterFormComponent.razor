@inherits FluxorComponent
@inject IDispatcher Dispatcher

@if (_ready)
{
    <EditForm Model="@_electricityMeter" OnValidSubmit="@HandleValidSubmit">
        <MudCard Elevation="0">
            <MudCardHeader>
                <MudText Class="fw-bolder" Typo="Typo.h6">Add your Electricity Meter</MudText>
            </MudCardHeader>
            <MudCardContent>


                <DataAnnotationsValidator />
                <div class="d-flex flex-column justify-start flex-grow-1 gap-4">

                    <div class="d-flex flex-row align-baseline">
                        <MudTextField For="@(() => _electricityMeter.Mpxn)" Label="Electricity Meter MPAN" @bind-Value="@_electricityMeter.Mpxn" Placeholder="Enter your MPAN number here"
                                                Required></MudTextField>
                         <DocTooltipIcon DocSnippetHeader="Electricity Meter MPAN" DocSnippet="DocSnippet.ElectricityMeterMPAN" IconTitle="Help for Electricity Meter Setup" />
                     </div>
                     <MudButton Class="mx-auto" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">@(_addingNotUpdating ? "Add" : "Update")</MudButton>
                </div>
                <div id="national-grid-iframe-container" class="mt-5 @(!_hideNationalGrid ? "toggled" : "")">
                    <MudText Typo="Typo.body1" Class="d-flex flex-column justify-center align-center mb-2">
                        <p>Don't know your Electricity Meter's MPAN number?</p>
                        <p>
                            Quickly find it via by toggling the National Grid lookup service:   <MudButton StartIcon="@Icons.Material.Filled.Bolt" Size="Size.Small"
                                                                                                            Variant="_hideNationalGrid ? Variant.Outlined : Variant.Filled"
                                                                                                            Color="Color.Default"
                                                                                                            title="@(_hideNationalGrid ? "Show the National Grid Service" : "Hide the National Grid Service")"
                                                                                                            OnClick="ToggleNationalGrid">@(_hideNationalGrid ? "Show Lookup" : "Hide Lookup Service")</MudButton>
                        </p>
                        <p>The service can be also accessed in a separate tab at <MudLink Href="https://supplier.nationalgrid.co.uk" Target="_blank">supplier.nationalgrid.co.uk <i aria-hidden="true" class="fa-solid fa-arrow-up-right-from-square"></i></MudLink></p>
                    </MudText>
                    <iframe id="iframeNationalGrid" hidden="@_hideNationalGrid"
                            src="https://supplier.nationalgrid.co.uk"></iframe>
                </div>


                </MudCardContent>
                <MudCardActions Class="d-flex flex-column align-start align-baseline">

                    <div aria-hidden="@(!_submitSuccessful)" class="@(_submitSuccessful ? "visible" : "invisible") mx-auto  mud-typography-h6 mud-success-text mt-2 ">
                        <span class="mx-auto">
                            <i class="fa-solid fa-check" aria-hidden="true"></i>
                            Electricity Meter Valid - proceed to authorize access to n3rgy.com?
                        </span>
                    </div>

                </MudCardActions>
            </MudCard>
        </EditForm>
}
@code {
    [Inject] IState<MeterSetupState> MeterSetupState { get; set; }

    [Inject] ILogger<AddElectricityMeterFormComponent> Logger { get; set; }

    [Parameter] public EventCallback OnSuccessfulCallback { get; set; }


    bool _hideNationalGrid = true;

    Meter _electricityMeter;

    bool _submitSuccessful;

    bool _addingNotUpdating;

    bool _ready = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        MapElectricityMeter();

    }

    private void MapElectricityMeter()
    {
        var meterState = MeterSetupState.Value.ElectricityMeter;
        if (meterState.InitialSetupValid)
        {
            _addingNotUpdating = false;
        }
        else
        {
            _addingNotUpdating = true;
        }
        _electricityMeter = meterState.eMapToMeterDto();
        _ready = true;
    }

    private void ToggleNationalGrid()
    {
        _hideNationalGrid = !_hideNationalGrid;
    }



    private async void HandleValidSubmit()
    {
        try
        {
            if (_addingNotUpdating)
            {
                Dispatcher.Dispatch(new AddElectricityAction(_electricityMeter));
            }
            else
            {
                Dispatcher.Dispatch(new UpdateElectricityAction(_electricityMeter));
            }
            _submitSuccessful = true;
            await OnSuccessfulCallback.InvokeAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error adding/updating electricity meter");
        }
    }
}