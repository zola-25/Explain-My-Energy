@inject IDispatcher Dispatcher
@inject AppStatus AppConfig
@inject IState<UserLockState> UserLockState
@inherits FluxorComponent

<MudTooltip ShowOnHover="true" Text="Return to Setup">
    <MudLink Class="ma-5 " Underline="Underline.None"
             Href="@($"/Setup")">
        <MudButton Color="Color.Default"
                   Class="fw-bolder"
                   ButtonType="ButtonType.Button"
                   Variant="Variant.Filled"
                   Size="Size.Small">
            <span><i class="fa-solid fa-arrow-left" aria-hidden="true"></i> Back to Setup</span>
        </MudButton>
    </MudLink>
</MudTooltip>


@{
    var disableInputs = AppConfig.IsDemoMode || UserLockState.Value.LockingOrLocked;
}

@if (UserLockState.Value.LockingOrLocked)
{
    <MudText Typo="Typo.body1" Align="Align.Center" Class="fw-bolder">Setup Data is Locked</MudText>
}
else
{
    <div class="d-flex justify-center align-center flex-wrap">
        <MudText Class="d-flex fw-bolder" Align="Align.Center" Typo="Typo.h5">@MeterType Tariff History </MudText>
        <DocTooltipIcon DocSnippetHeader="Editing Tariffs" DocSnippetType="DocSnippetType.EditingTariffs" IconTitle="Help for Adding and Editing Tariffs" />
    </div>
    <MudTable Items="@_tariffDetailRows" Elevation="0">
        <ToolBarContent>
            <MudSpacer />
            <MudIconButton OnClick="OnAddNewTariffClick"
                           Disabled="disableInputs"
                           ButtonType="ButtonType.Button"
                           Color="Color.Primary"
                           Variant="Variant.Filled"
                           Class="rounded-circle mr-5"
                           Icon="@Icons.Material.Filled.Add"
                           Title="Add Tariff Period"></MudIconButton>
        </ToolBarContent>
        <HeaderContent>
            <MudTh></MudTh>

            <MudTh Class="fw-bolder">Tariff Type</MudTh>
            <MudTh Class="fw-bolder">Applies From</MudTh>
            <MudTh Class="fw-bolder">Unit Rate (p/kWh)</MudTh>
            <MudTh Class="fw-bolder">Daily Standing Charge (p/Day)</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>

                @if (!context.IsHourOfDayFixed)
                {
                    <MudButton Variant="Variant.Outlined"
                               Size="Size.Small"
                               OnClick="@(() => context.ShowHourOfDayRows = !context.ShowHourOfDayRows)">
                        @((context.ShowHourOfDayRows) ? "Hide" : "Show") Hourly Rates
                    </MudButton>
                }
            </MudTd>
            <MudTd DataLabel="Tariff Type">
                @(context.IsHourOfDayFixed ? "Fixed Daily Rate" : "Variable Day Rate")
            </MudTd>

            <MudTd DataLabel="Applies From">@context.DateAppliesFrom.eToLongDateString()</MudTd>
                <MudTd DataLabel="Unit Rate (p/kWh)">
                    @if (context.IsHourOfDayFixed)
                {
                    @context.PencePerKWh.ePenceRateDisplay()
                }
                else
                {
                    @("N/A")
                }
            </MudTd>
            <MudTd DataLabel="Daily Standing Charge (p/Day)">@context.DailyStandingChargePence.ePenceRateDisplay()</MudTd>
                <MudTd DataLabel="Edit">
                    <MudButton Variant="Variant.Filled"
                               Size="Size.Small"
                               Class="fw-bolder"
                               Disabled="disableInputs"
                               OnClick="@(() => OnEditTariffClick(context))">Edit</MudButton>
                </MudTd>

            </RowTemplate>
            <ChildRowContent>
                @if (context.ShowHourOfDayRows)
            {
                <MudTr>
                    <td colspan="5">
                        <MudCard Elevation="0">
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.body1">Variable Rates applying from <strong>@context.DateAppliesFrom.eToLongDateString()</strong></MudText>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent Class="pa-0">
                                <MudTable Items="@context.HourOfDayPrices"
                                          Context="hourOfDayContext">

                                    <HeaderContent>
                                        <MudTh>Hour of Day (24hr)</MudTh>
                                        <MudTh>Unit Rate (p/kWh)</MudTh>
                                    </HeaderContent>
                                    <RowTemplate>
                                        <MudTd DataLabel="Hour of Day (24hr)">@hourOfDayContext.HourOfDay.eTimeSpanToString()</MudTd>
                                        <MudTd DataLabel="Unit Rate (p/kWh)">@hourOfDayContext.PencePerKWh.ePenceRateDisplay()</MudTd>
                                    </RowTemplate>
                                </MudTable>
                            </MudCardContent>
                        </MudCard>
                    </td>
                </MudTr>
            }
        </ChildRowContent>
    </MudTable>

}

<MudDialog @bind-IsVisible="_showEditDialogue" Options="new DialogOptions() {CloseButton = true, CloseOnEscapeKey = true, FullWidth = true }">
    <TitleContent>
        @(_adding ? "Add" : "Edit") Tariff Period
    </TitleContent>
    <DialogContent>
        <EditTariffForm Adding="_adding" TariffDetail="_addEditTariffDetail" MeterType="MeterType" OnSubmitCallback="TariffSubmitted"></EditTariffForm>
    </DialogContent>

</MudDialog>

@code
{
    [Parameter] public MeterType MeterType { get; set; }

    [Inject] IDialogService DialogService { get; set; }

    [Inject] IState<MeterSetupState> MeterSetupState { get; set; }

    [Inject] IStateSelection<MeterSetupState, ImmutableList<TariffDetailState>> TariffState { get; set; }


    List<TariffDetailRow> _tariffDetailRows;

    bool _showEditDialogue;
    bool _adding;


    TariffDetail _addEditTariffDetail;



    private record TariffDetailRow
    {
        public DateTime? DateAppliesFrom { get; set; }

        public decimal PencePerKWh { get; set; }
        public bool IsHourOfDayFixed { get; set; }

        public decimal DailyStandingChargePence { get; set; }

        public List<HourOfDayPrice> HourOfDayPrices { get; set; }
        public bool ShowHourOfDayRows { get; set; }
        public Guid GlobalId { get; set; }
    }

    protected override void OnParametersSet()
    {
        _tariffDetailState = MeterSetupState.Value[MeterType].TariffDetails.ToList();
        TariffState.Select(c => c[MeterType].TariffDetails, selectedValueChanged: SelectedValueChanged);

        SetTariffDetailRows();
    }

    private void SelectedValueChanged(ImmutableList<TariffDetailState> newTariffState)
    {
        _tariffDetailState = newTariffState.ToList();
    }

    private void OnAddNewTariffClick()
    {
        var exampleTariff = DefaultTariffData.GetCurrentExampleTariff(MeterType, ExampleTariffType.StandardFixedDaily);
        _addEditTariffDetail = new TariffDetail()
            {
                IsHourOfDayFixed = exampleTariff.IsHourOfDayFixed,
                PencePerKWh = exampleTariff.PencePerKWh,
                DailyStandingChargePence = exampleTariff.DailyStandingChargePence,
                DateAppliesFrom = DateTime.Today,
                HourOfDayPrices = exampleTariff.DefaultHourOfDayPrices.Select(c => new HourOfDayPrice()
                {
                    PencePerKWh = c.PencePerKWh,
                    HourOfDay = c.HourOfDay
                }).ToList(),
            };

        _adding = true;
        _showEditDialogue = true;
    }

    List<TariffDetailState> _tariffDetailState;


    private void SetTariffDetailRows()
    {
        _tariffDetailRows = UserLockState.Value.LockingOrLocked ? new List<TariffDetailRow>() : _tariffDetailState.Select((c, i) => new TariffDetailRow()
            {
                GlobalId = c.GlobalId,
                IsHourOfDayFixed = c.IsHourOfDayFixed,
                HourOfDayPrices = c.HourOfDayPrices.eMapToHourOfDayPriceDto(),
                PencePerKWh = c.PencePerKWh,
                DailyStandingChargePence = c.DailyStandingChargePence,
                DateAppliesFrom = c.DateAppliesFrom,
                ShowHourOfDayRows = false
            }).ToList();
    }

    private Task OnEditTariffClick(TariffDetailRow context)
    {
        _addEditTariffDetail = _tariffDetailState.Single(c => c.GlobalId == context.GlobalId).eMapToTariffDto();
        _adding = false;
        _showEditDialogue = true;

        return Task.CompletedTask;
    }

    private Task TariffSubmitted(TariffDetail tariffDetail)
    {
        if (_adding)
        {
            switch (MeterType)
            {
                case MeterType.Gas:
                    Dispatcher.Dispatch(new GasAddTariffAction(tariffDetail));
                    break;
                case MeterType.Electricity:
                    Dispatcher.Dispatch(new ElectricityAddTariffAction(tariffDetail));
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }
        }
        else
        {
            switch (MeterType)
            {
                case MeterType.Gas:
                    Dispatcher.Dispatch(new GasUpdateTariffAction(tariffDetail));
                    break;
                case MeterType.Electricity:
                    Dispatcher.Dispatch(new ElectricityUpdateTariffAction(tariffDetail));
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }
        }


        SetTariffDetailRows();
        _addEditTariffDetail = null;
        _showEditDialogue = false;

        return Task.CompletedTask;
    }


}

