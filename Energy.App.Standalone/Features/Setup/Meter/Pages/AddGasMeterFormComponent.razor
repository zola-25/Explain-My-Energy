@inherits FluxorComponent
@inject IDispatcher Dispatcher

@if (_ready)
{
    <EditForm Model="@_gasMeter" OnValidSubmit="@HandleValidSubmit">
        <MudCard Elevation="0">
            <MudCardHeader>
                <MudText Typo="Typo.h6">Setup your Gas Meter</MudText>
            </MudCardHeader>
            <MudCardContent>

                <DataAnnotationsValidator />


                <MudTextField For="@(() => _gasMeter.Mpxn)" Label="Gas Meter MPRN" @bind-Value="@_gasMeter.Mpxn" Placeholder="MPRN" Required></MudTextField>

                 <MudText Class="mt-5">
                     <p>Don't know your Gas Meter's MPRN number?</p>
                     <p>Find it here via <MudLink Href="https://www.findmysupplier.energy/" Target="_blank">findmysupplier.energy <i class="fa">&#xf08e;</i></MudLink></p>
                 </MudText>


             </MudCardContent>
             <MudCardActions Class="d-block">
                 <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">@(_addingNotUpdating ? "Add" : "Update")</MudButton>

                    <div class="@(_submitSuccessful ? "visible" : "invisible") d-flex my-5 mud-typography-h6 mud-success-text justify-start align-baseline ">
                        <span class="mx-auto">
                            <i class="fa-solid fa-check" aria-hidden="true"></i>
                            Gas Meter Valid - proceed to authorize access to n3rgy.com?
                        </span>
                    </div>

                </MudCardActions>
            </MudCard>
        </EditForm>
}
@code {

    [Inject] IState<MeterSetupState> MeterSetupState { get; set; }

    [Inject] ILogger<AddGasMeterFormComponent> Logger { get; set; }


    [Parameter]
    public EventCallback OnSuccessfulCallback { get; set; }


    Meter _gasMeter;

    bool _submitSuccessful;

    bool _addingNotUpdating;

    bool _ready = false;
    protected override void OnInitialized()
    {
        base.OnInitialized();
        MapGasMeter();
    }

    private void MapGasMeter()
    {
        var meterState = MeterSetupState.Value.GasMeter;
        if (meterState.InitialSetupValid)
        {
            _addingNotUpdating = false;
        }
        else
        {
            _addingNotUpdating = true;
        }
        _gasMeter = meterState.eMapToMeterDto();
        _ready = true;
    }


    private async void HandleValidSubmit()
    {
        try
        {
            if (_addingNotUpdating)
            {
                Dispatcher.Dispatch(new AddGasAction(_gasMeter));
            }
            else
            {
                Dispatcher.Dispatch(new UpdateGasAction(_gasMeter));
            }
            _submitSuccessful = true;
            await OnSuccessfulCallback.InvokeAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error adding/updating gas meter");
        }
    }
}
