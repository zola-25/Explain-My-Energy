@page "/MeterAuthorization/{MeterTypeText}"

@inherits FluxorComponent
@inject IDispatcher Dispatcher

<ExtendedPageTitle>@MeterTypeText Authorization</ExtendedPageTitle>

<MudOverlay @bind-Visible="_updatingReadings" DarkBackground="true" ZIndex="9">

    <MudText Typo="Typo.h4">Loading new Energy Readings</MudText>
    <div class="spinner"></div>

</MudOverlay>

<MudGrid Justify="Justify.Center">
    <MudItem xs="12">
        <MudPaper Elevation="2" Class="p-2 mt-2">
            <MudTooltip ShowOnHover="true" Text="Return to Setup">
                <MudLink Underline="Underline.None"
                         Href="@($"/Setup")">
                    <MudButton Class="m-1" Color="Color.Primary"
                               ButtonType="ButtonType.Button"
                               Variant="Variant.Filled"
                               Size="Size.Small"
                               StartIcon="@Icons.Material.Filled.ArrowBack">Back to Setup</MudButton>
                </MudLink>
            </MudTooltip>
            @if (_parametersSet)
            {
                <MeterAuthorizationFormComponent 
                    @bind-ReadingsLoading="_updatingReadings" 
                    MeterType="_meterType" OnSuccessfulCallback="OnSuccessfulCallback" />
            }
        </MudPaper>
    </MudItem>
    <MudItem xs="12">
        <MudPaper Elevation="2" Class="p-2 mt-2">
            @if (_processingResultsFinished)
            {
                <MudAlert Severity="@(_energyDataSuccess ? Severity.Success : Severity.Warning)">
                    @(_resultMessages)
                </MudAlert>
            }
        </MudPaper>

    </MudItem>
</MudGrid>

@code {

    [Parameter, EditorRequired]
    public string MeterTypeText { get; set; }

    bool _processingResultsFinished;
    bool _energyDataSuccess;
    string _resultMessages;
    private Task OnSuccessfulCallback((bool meterAuthSuccess, bool energyDataProcessSuccess, string message) result)
    {
        _energyDataSuccess = result.energyDataProcessSuccess;
        _resultMessages = result.message;
        _processingResultsFinished = true;
        StateHasChanged();
        return Task.CompletedTask;
    }

    bool _updatingReadings;


    MeterType _meterType;
    bool _parametersSet;
    protected override void OnParametersSet()
    {
        _parametersSet = false;

        _meterType = MeterTypeText switch
        {
            "Gas" => MeterType.Gas,
            "Electricity" => MeterType.Electricity,
            _ => throw new ArgumentException($"Invalid MeterTypeText: {MeterTypeText}")
        };

        _parametersSet = true;
    }

}