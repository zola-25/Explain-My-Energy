@page "/MeterAuthorization/{MeterTypeText}"

@inherits FluxorComponent
@inject IDispatcher Dispatcher

<ExtendedPageTitle>@MeterTypeText Authorization</ExtendedPageTitle>

<MudGrid Justify="Justify.Center">
    <MudItem xs="12">
        <MudPaper Elevation="2" Class="mt-2">
            <div class="d-flex justify-space-between mt-5">

                <MudTooltip ShowOnHover="true" Text="Return to Setup">
                    <MudLink Underline="Underline.None" Href="@($"/Setup")">
                        <MudButton Class="ma-5" Color="Color.Default" ButtonType="ButtonType.Button"
                            Variant="Variant.Filled" Size="Size.Small">
                            <span class="fw-bolder"><i class="fa-solid fa-arrow-left" aria-hidden="true"></i> Back to Setup</span>
                        </MudButton>
                    </MudLink>
                </MudTooltip>
            </div>
            @if (ParametersSet)
            {
                <MeterAuthorizationFormComponent FreshNavigation="true" MeterType="MeterType"
                    OnSuccessfulCallback="OnSuccessfulCallback" />
            }
        </MudPaper>
    </MudItem>

</MudGrid>

@code {

    [Parameter, EditorRequired]
    public string MeterTypeText { get; set; }

    private Task OnSuccessfulCallback(bool meterAuthSuccess)
    {
        return Task.CompletedTask;
    }


    MeterType MeterType;
    bool ParametersSet;
    protected override void OnParametersSet()
    {
        MeterType = MeterTypeText.eStringToEnum<MeterType>();
        ParametersSet = true;
    }

}