@using Fluxor.Persist.Middleware
@inherits FluxorComponent
@inject ISetDefaultLocalState DefaultLocalState
@inject IDispatcher Dispatcher
@inject NavigationManager NavManager

<Fluxor.Blazor.Web.StoreInitializer />

<Router AppAssembly="@typeof(App).Assembly">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
        <FocusOnNavigate RouteData="@routeData" Selector=".eme-focus" />
    </Found>
    <NotFound>
        <PageTitle>Not found</PageTitle>
        <LayoutView Layout="@typeof(MainLayout)">
            <p role="alert">Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>

@code {


    bool _demoSetup = false;

    protected override void OnInitialized()
    {
        Console.WriteLine("Demo Setup: " + _demoSetup);


        SubscribeToAction<InitializePersistMiddlewareResultSuccessAction>(result =>
        {
            Console.WriteLine($"**** State rehydrated ****");
            StateHasChanged();
        });

    }

    

    private bool _firstRender = true;

    // // Overridden to provide an async method that is run before any rendering
    public override async Task SetParametersAsync(ParameterView parameters)
    {
        // Apply the supplied Parameters to the Conponent
        // Must do this first
        parameters.SetParameterProperties(this);

            // Run the Pre Render code
        @if (_firstRender)
        {
            await this.PreFirstRenderAsync();
            _firstRender = false;
        }

        // Run the base SetParametersAsync providing it with an empty ParameterView
        // We have already applied the parameters and then may already be stale
        // This runs the normal lifecycle methods
        await base.SetParametersAsync(ParameterView.Empty);
    }

    public async Task PreFirstRenderAsync()
    {
        // Your async code goes here
        // You can run sync code too if you wish
        await DefaultLocalState.LoadDefaultsIfDemo();
        _demoSetup = DefaultLocalState.IsDemoMode;

        if (!_demoSetup){
            return;
        }

        Dispatcher.Dispatch(new PreloadHouseholdStateAction(DefaultLocalState.DemoHousehold));

        Dispatcher.Dispatch(new PreloadMeterSetupStateAction(DefaultLocalState.DemoMeterSetup));

        Dispatcher.Dispatch(new PreloadGasReadingsAction(DefaultLocalState.DemoGasReadings));

        Dispatcher.Dispatch(new PreloadElectricityReadingsAction(DefaultLocalState.DemoElectricityReadings));
    }

}